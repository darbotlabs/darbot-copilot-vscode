{
	"name": "darbot-copilot",
	"displayName": "Darbot Copilot",
	"description": "AI chat features powered by Darbot Copilot",
	"version": "0.30.0",
	"build": "1",
	"internalAIKey": "1058ec22-3c95-4951-8443-f26c1f325911",
	"internalLargeStorageAriaKey": "ec712b3202c5462fb6877acae7f1f9d7-c19ad55e-3e3c-4f99-984b-827f6d95bd9e-6917",
	"ariaKey": "0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255",
	"buildType": "dev",
	"publisher": "darbotlabs",
	"homepage": "https://github.com/darbotlabs/darbot-copilot-vscode",
	"license": "SEE LICENSE IN LICENSE.txt",
	"repository": {
		"type": "git",
		"url": "https://github.com/darbotlabs/darbot-copilot-vscode"
	},
	"bugs": {
		"url": "https://github.com/darbotlabs/darbot-copilot-vscode/issues"
	},
	"qna": "https://github.com/darbotlabs/darbot-copilot-vscode/discussions",
	"icon": "assets/darbot.png",
	"pricing": "Trial",
	"engines": {
		"vscode": "^1.103.0-insider",
		"npm": ">=9.0.0",
		"node": ">=22.14.0"
	},
	"categories": [
		"AI",
		"Chat",
		"Programming Languages",
		"Machine Learning"
	],
	"keywords": [
		"ai",
		"openai",
		"codex",
		"darbot",
		"snippets",
		"documentation",
		"autocomplete",
		"intellisense",
		"refactor",
		"javascript",
		"python",
		"typescript",
		"php",
		"go",
		"golang",
		"ruby",
		"c++",
		"c#",
		"java",
		"kotlin",
		"darbot-copilot"
	],
	"badges": [
		{
			"url": "https://img.shields.io/badge/Darbot%20Copilot-Available-green",
			"href": "https://github.com/darbotlabs/darbot-copilot-vscode",
			"description": "%darbot.darbot.badge.available%"
		},
		{
			"url": "https://img.shields.io/github/stars/darbotlabs/darbot-copilot-vscode?style=social",
			"href": "https://github.com/darbotlabs/darbot-copilot-vscode",
			"description": "%darbot.darbot.badge.star%"
		},
		{
			"url": "https://img.shields.io/twitter/follow/darbotlabs?style=social",
			"href": "https://twitter.com/darbotlabs",
			"description": "%darbot.darbot.badge.twitter%"
		}
	],
	"activationEvents": [
		"onStartupFinished",
		"onLanguageModelChat:darbot",
		"onUri",
		"onFileSystem:ccreq",
		"onFileSystem:ccsettings"
	],
	"main": "./dist/extension",
	"l10n": "./l10n",
	"enabledApiProposals": [
		"extensionsAny",
		"newSymbolNamesProvider",
		"interactive",
		"codeActionAI",
		"activeComment",
		"commentReveal",
		"contribCommentThreadAdditionalMenu",
		"contribCommentsViewThreadMenus",
		"documentFiltersExclusive",
		"embeddings",
		"findTextInFiles",
		"findTextInFiles2",
		"findFiles2@2",
		"textSearchProvider",
		"terminalDataWriteEvent",
		"terminalExecuteCommandEvent",
		"terminalSelection",
		"terminalQuickFixProvider",
		"mappedEditsProvider",
		"aiRelatedInformation",
		"chatParticipantAdditions",
		"chatEditing",
		"defaultChatParticipant@4",
		"contribSourceControlInputBoxMenu",
		"authLearnMore",
		"testObserver",
		"aiTextSearchProvider@2",
		"chatParticipantPrivate@9",
		"chatProvider",
		"contribDebugCreateConfiguration",
		"chatReferenceDiagnostic",
		"textSearchProvider2",
		"chatReferenceBinaryData",
		"languageModelSystem",
		"languageModelCapabilities",
		"inlineCompletionsAdditions",
		"languageModelDataPart@3",
		"chatStatusItem",
		"taskProblemMatcherStatus",
		"contribLanguageModelToolSets",
		"textDocumentChangeReason",
		"resolvers",
		"taskExecutionTerminal"
	],
	"contributes": {
		"languageModelTools": [
			{
				"name": "darbot_searchCodebase",
				"toolReferenceName": "codebase",
				"displayName": "%darbot.tools.searchCodebase.name%",
				"icon": "$(folder)",
				"canBeReferencedInPrompt": true,
				"userDescription": "%darbot.codebase.tool.description%",
				"modelDescription": "Run a natural language search for relevant code or documentation comments from the user's current workspace. Returns relevant code snippets from the user's current workspace if it is large, or the full contents of the workspace if it is small.",
				"tags": [
					"codesearch",
					"vscode_codesearch"
				],
				"inputSchema": {
					"type": "object",
					"properties": {
						"query": {
							"type": "string",
							"description": "The query to search the codebase for. Should contain all relevant context. Should ideally be text that might appear in the codebase, such as function names, variable names, or comments."
						}
					},
					"required": [
						"query"
					]
				}
			},
			{
				"name": "darbot_searchWorkspaceSymbols",
				"toolReferenceName": "symbols",
				"displayName": "%darbot.tools.searchWorkspaceSymbols.name%",
				"icon": "$(symbol)",
				"userDescription": "%darbot.workspaceSymbols.tool.description%",
				"modelDescription": "Search the user's workspace for code symbols using language services. Use this tool when the user is looking for a specific symbol in their workspace.",
				"tags": [
					"vscode_codesearch"
				],
				"inputSchema": {
					"type": "object",
					"properties": {
						"symbolName": {
							"type": "string",
							"description": "The symbol to search for, such as a function name, class name, or variable name."
						}
					},
					"required": [
						"symbolName"
					]
				}
			},
			{
				"name": "darbot_listCodeUsages",
				"toolReferenceName": "usages",
				"displayName": "%darbot.tools.listCodeUsages.name%",
				"icon": "$(references)",
				"canBeReferencedInPrompt": true,
				"userDescription": "%darbot.listCodeUsages.tool.description%",
				"modelDescription": "Request to list all usages (references, definitions, implementations etc) of a function, class, method, variable etc. Use this tool when \n1. Looking for a sample implementation of an interface or class\n2. Checking how a function is used throughout the codebase.\n3. Including and updating all usages when changing a function, method, or constructor",
				"tags": [
					"vscode_codesearch"
				],
				"inputSchema": {
					"type": "object",
					"properties": {
						"symbolName": {
							"type": "string",
							"description": "The name of the symbol, such as a function name, class name, method name, variable name, etc."
						},
						"filePaths": {
							"type": "array",
							"description": "One or more file paths which likely contain the definition of the symbol. For instance the file which declares a class or function. This is optional but will speed up the invocation of this tool and improve the quality of its output.",
							"items": {
								"type": "string"
							}
						}
					},
					"required": [
						"symbolName"
					]
				}
			},
			{
				"name": "darbot_getVSCodeAPI",
				"toolReferenceName": "vscodeAPI",
				"displayName": "%darbot.tools.getVSCodeAPI.name%",
				"icon": "$(references)",
				"userDescription": "%darbot.vscode.tool.description%",
				"modelDescription": "Get relevant VS Code API references to answer questions about VS Code extension development. Use this tool when the user asks about VS Code APIs, capabilities, or best practices related to developing VS Code extensions. Use it in all VS Code extension development workspaces.",
				"inputSchema": {
					"type": "object",
					"properties": {
						"query": {
							"type": "string",
							"description": "The query to search vscode documentation for. Should contain all relevant context."
						}
					},
					"required": [
						"query"
					]
				},
				"tags": [],
				"canBeReferencedInPrompt": true
			},
			{
				"displayName": "%darbot.tools.think.name%",
				"name": "darbot_think",
				"tags": [],
				"when": "config.darbot.chat.agent.thinkingTool",
				"modelDescription": "Use this tool to think deeply about the user's request and organize your thoughts. This tool helps improve response quality by allowing the model to consider the request carefully, brainstorm solutions, and plan complex tasks. It's particularly useful for:\n\n1. Exploring repository issues and brainstorming bug fixes\n2. Analyzing test results and planning fixes\n3. Planning complex refactoring approaches\n4. Designing new features and architecture\n5. Organizing debugging hypotheses\n\nThe tool logs your thought process for transparency but doesn't execute any code or make changes.",
				"inputSchema": {
					"type": "object",
					"properties": {
						"thoughts": {
							"type": "string",
							"description": "Your thoughts about the current task or problem. This should be a clear, structured explanation of your reasoning, analysis, or planning process."
						}
					},
					"required": [
						"thoughts"
					]
				}
			},
			{
				"name": "darbot_findFiles",
				"toolReferenceName": "fileSearch",
				"displayName": "%darbot.tools.findFiles.name%",
				"modelDescription": "Search for files in the workspace by glob pattern. This only returns the paths of matching files. Use this tool when you know the exact filename pattern of the files you're searching for. Glob patterns match from the root of the workspace folder. Examples:\n- **/*.{js,ts} to match all js/ts files in the workspace.\n- src/** to match all files under the top-level src folder.\n- **/foo/**/*.js to match all js files under any foo folder in the workspace.",
				"tags": [
					"vscode_codesearch"
				],
				"inputSchema": {
					"type": "object",
					"properties": {
						"query": {
							"type": "string",
							"description": "Search for files with names or paths matching this glob pattern."
						},
						"maxResults": {
							"type": "number",
							"description": "The maximum number of results to return. Do not use this unless necessary, it can slow things down. By default, only some matches are returned. If you use this and don't see what you're looking for, you can try again with a more specific query or a larger maxResults."
						}
					},
					"required": [
						"query"
					]
				}
			},
			{
				"name": "darbot_findTextInFiles",
				"toolReferenceName": "textSearch",
				"displayName": "%darbot.tools.findTextInFiles.name%",
				"modelDescription": "Do a fast text search in the workspace. Use this tool when you want to search with an exact string or regex. If you are not sure what words will appear in the workspace, prefer using regex patterns with alternation (|) or character classes to search for multiple potential words at once instead of making separate searches. For example, use 'function|method|procedure' to look for all of those words at once. Use includePattern to search within files matching a specific pattern, or in a specific file, using a relative path. Use this tool when you want to see an overview of a particular file, instead of using read_file many times to look for code within a file.",
				"tags": [
					"vscode_codesearch"
				],
				"inputSchema": {
					"type": "object",
					"properties": {
						"query": {
							"type": "string",
							"description": "The pattern to search for in files in the workspace. Use regex with alternation (e.g., 'word1|word2|word3') or character classes to find multiple potential words in a single search. Be sure to set the isRegexp property properly to declare whether it's a regex or plain text pattern. Is case-insensitive."
						},
						"isRegexp": {
							"type": "boolean",
							"description": "Whether the pattern is a regex."
						},
						"includePattern": {
							"type": "string",
							"description": "Search files matching this glob pattern. Will be applied to the relative path of files within the workspace. To search recursively inside a folder, use a proper glob pattern like \"src/folder/**\". Do not use | in includePattern."
						},
						"maxResults": {
							"type": "number",
							"description": "The maximum number of results to return. Do not use this unless necessary, it can slow things down. By default, only some matches are returned. If you use this and don't see what you're looking for, you can try again with a more specific query or a larger maxResults."
						}
					},
					"required": [
						"query",
						"isRegexp"
					]
				}
			},
			{
				"name": "darbot_applyPatch",
				"displayName": "%darbot.tools.applyPatch.name%",
				"toolReferenceName": "applyPatch",
				"userDescription": "%darbot.tools.applyPatch.description%",
				"modelDescription": "Edit text files. Do not use this tool to edit Jupyter notebooks. `apply_patch` allows you to execute a diff/patch against a text file, but the format of the diff specification is unique to this task, so pay careful attention to these instructions. To use the `apply_patch` command, you should pass a message of the following structure as \"input\":\n\n*** Begin Patch\n[YOUR_PATCH]\n*** End Patch\n\nWhere [YOUR_PATCH] is the actual content of your patch, specified in the following V4A diff format.\n\n*** [ACTION] File: [/absolute/path/to/file] -> ACTION can be one of Add, Update, or Delete.\nAn example of a message that you might pass as \"input\" to this function, in order to apply a patch, is shown below.\n\n*** Begin Patch\n*** Update File: /Users/someone/pygorithm/searching/binary_search.py\n@@class BaseClass\n@@    def search():\n-        pass\n+        raise NotImplementedError()\n\n@@class Subclass\n@@    def search():\n-        pass\n+        raise NotImplementedError()\n\n*** End Patch\nDo not use line numbers in this diff format.",
				"inputSchema": {
					"type": "object",
					"properties": {
						"input": {
							"type": "string",
							"description": "The edit patch to apply."
						},
						"explanation": {
							"type": "string",
							"description": "A short description of what the tool call is aiming to achieve."
						}
					},
					"required": [
						"input",
						"explanation"
					]
				}
			},
			{
				"name": "darbot_readFile",
				"toolReferenceName": "readFile",
				"displayName": "%darbot.tools.readFile.name%",
				"modelDescription": "Read the contents of a file.\n\nYou must specify the line range you're interested in. Line numbers are 1-indexed. If the file contents returned are insufficient for your task, you may call this tool again to retrieve more content. Prefer reading larger ranges over doing many small reads.",
				"tags": [
					"vscode_codesearch"
				],
				"inputSchema": {
					"type": "object",
					"properties": {
						"filePath": {
							"description": "The absolute path of the file to read.",
							"type": "string"
						},
						"startLine": {
							"type": "number",
							"description": "The line number to start reading from, 1-based."
						},
						"endLine": {
							"type": "number",
							"description": "The inclusive line number to end reading at, 1-based."
						}
					},
					"required": [
						"filePath",
						"startLine",
						"endLine"
					]
				}
			},
			{
				"name": "darbot_listDirectory",
				"toolReferenceName": "listDirectory",
				"displayName": "%darbot.tools.listDirectory.name%",
				"modelDescription": "List the contents of a directory. Result will have the name of the child. If the name ends in /, it's a folder, otherwise a file",
				"tags": [
					"vscode_codesearch"
				],
				"inputSchema": {
					"type": "object",
					"properties": {
						"path": {
							"type": "string",
							"description": "The absolute path to the directory to list."
						}
					},
					"required": [
						"path"
					]
				}
			},
			{
				"name": "darbot_runInTerminal",
				"toolReferenceName": "runInTerminal",
				"displayName": "%darbot.tools.runInTerminal.name%",
				"modelDescription": "This tool allows you to execute shell commands in a persistent terminal session, preserving environment variables, working directory, and other context across multiple commands.\n\nCommand Execution:\n- Supports multi-line commands \n\nDirectory Management:\n- Must use absolute paths to avoid navigation issues.\n\nProgram Execution:\n- Supports Python, Node.js, and other executables.\n- Install dependencies via pip, npm, etc.\n\nBackground Processes:\n- For long-running tasks (e.g., servers), set isBackground=true.\n- Returns a terminal ID for checking status and runtime later.\n\nOutput Management:\n- Output is automatically truncated if longer than 60KB to prevent context overflow\n- Use filters like 'head', 'tail', 'grep' to limit output size\n- For pager commands, disable paging: use 'git --no-pager' or add '| cat'\n\nBest Practices:\n- Be specific with commands to avoid excessive output\n- Use targeted queries instead of broad scans\n- Consider using 'wc -l' to count before listing many items",
				"tags": [],
				"inputSchema": {
					"type": "object",
					"properties": {
						"command": {
							"type": "string",
							"description": "The command to run in the terminal."
						},
						"explanation": {
							"type": "string",
							"description": "A one-sentence description of what the command does. This will be shown to the user before the command is run."
						},
						"isBackground": {
							"type": "boolean",
							"description": "Whether the command starts a background process. If true, the command will run in the background and you will not see the output. If false, the tool call will block on the command finishing, and then you will get the output. Examples of background processes: building in watch mode, starting a server. You can check the output of a background process later on by using copilot_getTerminalOutput."
						}
					},
					"required": [
						"command",
						"explanation",
						"isBackground"
					]
				}
			},
			{
				"name": "darbot_getTerminalOutput",
				"toolReferenceName": "getTerminalOutput",
				"displayName": "%darbot.tools.getTerminalOutput.name%",
				"modelDescription": "Get the output of a terminal command previously started with runInTerminal",
				"tags": [],
				"inputSchema": {
					"type": "object",
					"properties": {
						"id": {
							"type": "string",
							"description": "The ID of the terminal command output to check."
						}
					},
					"required": [
						"id"
					]
				}
			},
			{
				"name": "darbot_getTaskOutput",
				"toolReferenceName": "getTaskOutput",
				"displayName": "%darbot.tools.getTaskOutput.name%",
				"modelDescription": "Retrieves the output of a VS Code task.\n- Use this tool when the user is trying to understand the current project state, debug issues, or analyze task-related errors, output, or status.",
				"tags": [],
				"inputSchema": {
					"type": "object",
					"properties": {
						"workspaceFolder": {
							"type": "string",
							"description": "The workspace folder path containing the task"
						},
						"id": {
							"type": "string",
							"description": "The task ID to run."
						},
						"maxCharsToRetrieve": {
							"type": "number",
							"description": "The maximum number of characters to retrieve from the terminal output."
						}
					},
					"required": [
						"id",
						"workspaceFolder"
					]
				}
			},
			{
				"name": "darbot_getErrors",
				"displayName": "%darbot.tools.getErrors.name%",
				"toolReferenceName": "problems",
				"canBeReferencedInPrompt": true,
				"icon": "$(error)",
				"userDescription": "%darbot.tools.errors.description%",
				"modelDescription": "Get any compile or lint errors in a code file. If the user mentions errors or problems in a file, they may be referring to these. Use the tool to see the same errors that the user is seeing. Also use this tool after editing a file to validate the change.",
				"tags": [],
				"inputSchema": {
					"type": "object",
					"properties": {
						"filePaths": {
							"description": "The absolute paths to the files to check for errors.",
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					"required": [
						"filePaths"
					]
				}
			},
			{
				"name": "darbot_readProjectStructure",
				"displayName": "%darbot.tools.readProjectStructure.name%",
				"modelDescription": "Get a file tree representation of the workspace.",
				"tags": []
			},
			{
				"name": "darbot_getChangedFiles",
				"displayName": "%darbot.tools.getChangedFiles.name%",
				"toolReferenceName": "changes",
				"icon": "$(diff)",
				"canBeReferencedInPrompt": true,
				"userDescription": "%darbot.tools.changes.description%",
				"modelDescription": "Get git diffs of current file changes in a git repository. Don't forget that you can use copilot_runInTerminal to run git commands in a terminal as well.",
				"tags": [
					"vscode_codesearch"
				],
				"inputSchema": {
					"type": "object",
					"properties": {
						"repositoryPath": {
							"type": "string",
							"description": "The absolute path to the git repository to look for changes in. If not provided, the active git repository will be used."
						},
						"sourceControlState": {
							"type": "array",
							"items": {
								"type": "string",
								"enum": [
									"staged",
									"unstaged",
									"merge-conflicts"
								]
							},
							"description": "The kinds of git state to filter by. Allowed values are: 'staged', 'unstaged', and 'merge-conflicts'. If not provided, all states will be included."
						}
					}
				}
			},
			{
				"name": "darbot_testFailure",
				"toolReferenceName": "testFailure",
				"displayName": "%darbot.tools.testFailure.name%",
				"icon": "$(beaker)",
				"userDescription": "%darbot.testFailure.tool.description%",
				"modelDescription": "Includes test failure information in the prompt.",
				"inputSchema": {},
				"tags": [
					"vscode_editing_with_tests",
					"enable_other_tool_copilot_readFile",
					"enable_other_tool_copilot_listDirectory",
					"enable_other_tool_copilot_findFiles",
					"enable_other_tool_copilot_runTests"
				],
				"canBeReferencedInPrompt": true
			},
			{
				"name": "darbot_updateUserPreferences",
				"toolReferenceName": "updateUserPreferences",
				"displayName": "%darbot.tools.updateUserPreferences.name%",
				"modelDescription": "Update the user's preferences file with new information about the user and their coding preferences, based on the current chat history.",
				"canBeReferencedInPrompt": true,
				"tags": [],
				"inputSchema": {
					"type": "object",
					"properties": {
						"facts": {
							"type": "array",
							"items": {
								"type": "string"
							},
							"description": "An array of new user preferences to remember."
						}
					},
					"required": [
						"facts"
					]
				},
				"when": "config.darbot.chat.enableUserPreferences"
			},
			{
				"name": "darbot_runTests",
				"toolReferenceName": "runTests",
				"canBeReferencedInPrompt": true,
				"displayName": "%darbot.tools.runTests.name%",
				"modelDescription": "Runs unit tests in files. Use this tool if the user asks to run tests or when you want to validate changes using unit tests. When possible, always try to provide `files` paths containing the relevant unit tests in order to avoid unnecessarily long test runs.",
				"inputSchema": {
					"type": "object",
					"properties": {
						"files": {
							"type": "array",
							"items": {
								"type": "string"
							},
							"description": "Test files to run. If not provided, all test files will be run."
						}
					}
				},
				"tags": [
					"vscode_editing_with_tests",
					"enable_other_tool_copilot_readFile",
					"enable_other_tool_copilot_listDirectory",
					"enable_other_tool_copilot_findFiles",
					"enable_other_tool_copilot_runTests"
				]
			},
			{
				"name": "darbot_getTerminalSelection",
				"toolReferenceName": "terminalSelection",
				"displayName": "%darbot.tools.terminalSelection.name%",
				"modelDescription": "Get the user's current selection in the active terminal.",
				"userDescription": "%darbot.tools.terminalSelection.description%",
				"canBeReferencedInPrompt": true,
				"icon": "$(terminal)"
			},
			{
				"name": "darbot_getTerminalLastCommand",
				"toolReferenceName": "terminalLastCommand",
				"displayName": "%darbot.tools.terminalLastCommand.name%",
				"modelDescription": "Get the active terminal's last run command.",
				"userDescription": "%darbot.tools.terminalLastCommand.description%",
				"canBeReferencedInPrompt": true,
				"icon": "$(terminal)"
			},
			{
				"name": "darbot_createNewWorkspace",
				"displayName": "%darbot.tools.createNewWorkspace.name%",
				"toolReferenceName": "newWorkspace",
				"icon": "$(new-folder)",
				"userDescription": "%darbot.tools.createNewWorkspace.userDescription%",
				"when": "config.darbot.chat.newWorkspaceCreation.enabled",
				"modelDescription": "Get steps to help the user create any project in a VS Code workspace. Use this tool to help users set up new projects, including TypeScript-based projects, Model Context Protocol (MCP) servers, VS Code extensions, Next.js projects, Vite projects, or any other project.",
				"inputSchema": {
					"type": "object",
					"properties": {
						"query": {
							"type": "string",
							"description": "The query to use to generate the new workspace. This should be a clear and concise description of the workspace the user wants to create."
						}
					},
					"required": [
						"query"
					]
				},
				"tags": [
					"enable_other_tool_install_extension",
					"enable_other_tool_get_project_setup_info"
				]
			},
			{
				"name": "darbot_createAndRunTask",
				"displayName": "%darbot.tools.createAndRunTask.name%",
				"toolReferenceName": "createAndRunTask",
				"canBeReferencedInPrompt": false,
				"icon": "$(json)",
				"userDescription": "%darbot.tools.createAndRunTask.userDescription%",
				"when": "config.darbot.chat.agent.runTasks",
				"modelDescription": "For a workspace, this tool will create a task based on the package.json, README.md, and project structure so that the project can be built and run.",
				"inputSchema": {
					"type": "object",
					"properties": {
						"workspaceFolder": {
							"type": "string",
							"description": "The absolute path of the workspace folder where the tasks.json file will be created."
						},
						"task": {
							"type": "object",
							"description": "The task to add to the new tasks.json file.",
							"properties": {
								"label": {
									"type": "string",
									"description": "The label of the task."
								},
								"type": {
									"type": "string",
									"description": "The type of the task. The only supported value is 'shell'.",
									"enum": [
										"shell"
									]
								},
								"command": {
									"type": "string",
									"description": "The shell command to run for the task. Use this to specify commands for building or running the application."
								},
								"args": {
									"type": "array",
									"description": "The arguments to pass to the command.",
									"items": {
										"type": "string"
									}
								},
								"isBackground": {
									"type": "boolean",
									"description": "Whether the task runs in the background without blocking the UI or other tasks. Set to true for long-running processes like watch tasks or servers that should continue executing without requiring user attention. When false, the task will block the terminal until completion."
								},
								"problemMatcher": {
									"type": "array",
									"description": "The problem matcher to use to parse task output for errors and warnings. Can be a predefined matcher like '$tsc' (TypeScript), '$eslint-stylish', '$gcc', etc., or a custom pattern defined in tasks.json. This helps VS Code display errors in the Problems panel and enables quick navigation to error locations.",
									"items": {
										"type": "string"
									}
								},
								"group": {
									"type": "string",
									"description": "The group to which the task belongs."
								}
							},
							"required": [
								"label",
								"type",
								"command"
							]
						}
					},
					"required": [
						"task",
						"workspaceFolder"
					]
				},
				"tags": [
					"enable_other_tool_copilot_getProjectSetupInfo"
				]
			},
			{
				"name": "darbot_getProjectSetupInfo",
				"displayName": "%darbot.tools.getProjectSetupInfo.name%",
				"when": "config.darbot.chat.newWorkspaceCreation.enabled",
				"toolReferenceName": "getProjectSetupInfo",
				"modelDescription": "Do not call this tool without first calling the tool to create a workspace. This tool provides a project setup information for a Visual Studio Code workspace based on a project type and programming language.",
				"inputSchema": {
					"type": "object",
					"properties": {
						"projectType": {
							"type": "string",
							"description": "The type of project to create. Supported values are: 'python-script', 'python-project', 'mcp-server', 'model-context-protocol-server', 'vscode-extension', 'next-js', 'vite' and 'other'"
						},
						"language": {
							"type": "string",
							"description": "The programming language for the project. Supported: 'javascript', 'typescript', 'python' and 'other'."
						}
					},
					"required": [
						"projectType"
					]
				},
				"tags": []
			},
			{
				"name": "darbot_installExtension",
				"displayName": "Install Extension in VS Code",
				"when": "config.darbot.chat.newWorkspaceCreation.enabled",
				"toolReferenceName": "installExtension",
				"modelDescription": "Install an extension in VS Code. Use this tool to install an extension in Visual Studio Code as part of a new workspace creation process only.",
				"inputSchema": {
					"type": "object",
					"properties": {
						"id": {
							"type": "string",
							"description": "The ID of the extension to install. This should be in the format <publisher>.<extension>."
						},
						"name": {
							"type": "string",
							"description": "The name of the extension to install. This should be a clear and concise description of the extension."
						}
					},
					"required": [
						"id",
						"name"
					]
				},
				"tags": []
			},
			{
				"name": "darbot_runVscodeCommand",
				"displayName": "Run VS Code Command",
				"when": "config.darbot.chat.newWorkspaceCreation.enabled",
				"toolReferenceName": "runVscodeCommand",
				"modelDescription": "Run a command in VS Code. Use this tool to run a command in Visual Studio Code as part of a new workspace creation process only.",
				"inputSchema": {
					"type": "object",
					"properties": {
						"commandId": {
							"type": "string",
							"description": "The ID of the command to execute. This should be in the format <command>."
						},
						"name": {
							"type": "string",
							"description": "The name of the command to execute. This should be a clear and concise description of the command."
						},
						"args": {
							"type": "array",
							"description": "The arguments to pass to the command. This should be an array of strings.",
							"items": {
								"type": "string"
							}
						}
					},
					"required": [
						"commandId",
						"name"
					]
				},
				"tags": []
			},
			{
				"name": "darbot_createNewJupyterNotebook",
				"displayName": "Create New Jupyter Notebook",
				"icon": "$(notebook)",
				"toolReferenceName": "newJupyterNotebook",
				"modelDescription": "Generates a new Jupyter Notebook (.ipynb) in VS Code. Jupyter Notebooks are interactive documents commonly used for data exploration, analysis, visualization, and combining code with narrative text. This tool should only be called when the user explicitly requests to create a new Jupyter Notebook.",
				"userDescription": "%darbot.tools.newJupyterNotebook.description%",
				"inputSchema": {
					"type": "object",
					"properties": {
						"query": {
							"type": "string",
							"description": "The query to use to generate the jupyter notebook. This should be a clear and concise description of the notebook the user wants to create."
						}
					},
					"required": [
						"query"
					]
				},
				"tags": []
			},
			{
				"name": "darbot_runVsCodeTask",
				"displayName": "runVsCodeTask",
				"toolReferenceName": "runTask",
				"modelDescription": "Runs a VS Code task.\n\n- If you see that an appropriate task exists for building or running code, prefer to use this tool to run the task instead of using the run_in_terminal tool.\n- Make sure that any appropriate build or watch task is running before trying to run tests or execute code.\n- If the user asks to run a task, use this tool to do so.",
				"inputSchema": {
					"type": "object",
					"properties": {
						"workspaceFolder": {
							"type": "string",
							"description": "The workspace folder path containing the task"
						},
						"id": {
							"type": "string",
							"description": "The task ID to run."
						}
					},
					"required": [
						"workspaceFolder",
						"id"
					]
				}
			},
			{
				"name": "darbot_insertEdit",
				"toolReferenceName": "insertEdit",
				"displayName": "%darbot.tools.insertEdit.name%",
				"modelDescription": "Insert new code into an existing file in the workspace. Use this tool once per file that needs to be modified, even if there are multiple changes for a file. Generate the \"explanation\" property first.\nThe system is very smart and can understand how to apply your edits to the files, you just need to provide minimal hints.\nAvoid repeating existing code, instead use comments to represent regions of unchanged code. Be as concise as possible. For example:\n// ...existing code...\n{ changed code }\n// ...existing code...\n{ changed code }\n// ...existing code...\n\nHere is an example of how you should use format an edit to an existing Person class:\nclass Person {\n\t// ...existing code...\n\tage: number;\n\t// ...existing code...\n\tgetAge() {\n\treturn this.age;\n\t}\n}",
				"tags": [],
				"inputSchema": {
					"type": "object",
					"properties": {
						"explanation": {
							"type": "string",
							"description": "A short explanation of the edit being made."
						},
						"filePath": {
							"type": "string",
							"description": "An absolute path to the file to edit."
						},
						"code": {
							"type": "string",
							"description": "The code change to apply to the file.\nThe system is very smart and can understand how to apply your edits to the files, you just need to provide minimal hints.\nAvoid repeating existing code, instead use comments to represent regions of unchanged code. Be as concise as possible. For example:\n// ...existing code...\n{ changed code }\n// ...existing code...\n{ changed code }\n// ...existing code...\n\nHere is an example of how you should use format an edit to an existing Person class:\nclass Person {\n\t// ...existing code...\n\tage: number;\n\t// ...existing code...\n\tgetAge() {\n\t\treturn this.age;\n\t}\n}"
						}
					},
					"required": [
						"explanation",
						"filePath",
						"code"
					]
				}
			},
			{
				"name": "darbot_createFile",
				"toolReferenceName": "createFile",
				"displayName": "%darbot.tools.createFile.name%",
				"modelDescription": "This is a tool for creating a new file in the workspace. The file will be created with the specified content. The directory will be created if it does not already exist. Never use this tool to edit a file that already exists.",
				"tags": [],
				"inputSchema": {
					"type": "object",
					"properties": {
						"filePath": {
							"type": "string",
							"description": "The absolute path to the file to create."
						},
						"content": {
							"type": "string",
							"description": "The content to write to the file."
						}
					},
					"required": [
						"filePath",
						"content"
					]
				}
			},
			{
				"name": "darbot_createDirectory",
				"toolReferenceName": "createDirectory",
				"displayName": "%darbot.tools.createDirectory.name%",
				"modelDescription": "Create a new directory structure in the workspace. Will recursively create all directories in the path, like mkdir -p. You do not need to use this tool before using create_file, that tool will automatically create the needed directories.",
				"tags": [],
				"inputSchema": {
					"type": "object",
					"properties": {
						"dirPath": {
							"type": "string",
							"description": "The absolute path to the directory to create."
						}
					},
					"required": [
						"dirPath"
					]
				}
			},
			{
				"name": "darbot_openSimpleBrowser",
				"displayName": "%darbot.tools.openSimpleBrowser.name%",
				"modelDescription": "Preview a website or open a URL in the editor's Simple Browser. Useful for quickly viewing locally hosted websites, demos, or resources without leaving the coding environment.",
				"userDescription": "%darbot.tools.openSimpleBrowser.description%",
				"toolReferenceName": "openSimpleBrowser",
				"canBeReferencedInPrompt": true,
				"tags": [],
				"inputSchema": {
					"type": "object",
					"properties": {
						"url": {
							"type": "string",
							"description": "The website URL to preview or open in the Simple Browser inside the editor."
						}
					},
					"required": [
						"url"
					]
				}
			},
			{
				"name": "darbot_replaceString",
				"toolReferenceName": "replaceString",
				"displayName": "%darbot.tools.replaceString.name%",
				"modelDescription": "This is a tool for making edits in an existing file in the workspace. For moving or renaming files, use run in terminal tool with the 'mv' command instead. For larger edits, split them into smaller edits and call the edit tool multiple times to ensure accuracy. Before editing, always ensure you have the context to understand the file's contents and context. To edit a file, provide: 1) filePath (absolute path), 2) oldString (must exactly match, including whitespace and indentation, uniquely identifying a single occurrence), and 3) newString (replacement text). Each use of this tool replaces exactly ONE occurrence of oldString. CRITICAL REQUIREMENTS: ensure oldString uniquely identifies the change by including at least 3-5 lines of context both before and after the target text, preserving whitespace and indentation exactly. Never use ...existing code... comments in the oldString or newString. Edits must result in valid, idiomatic code and not leave the file broken!",
				"when": "!config.darbot.chat.disableReplaceTool",
				"inputSchema": {
					"type": "object",
					"properties": {
						"filePath": {
							"type": "string",
							"description": "An absolute path to the file to edit."
						},
						"oldString": {
							"type": "string",
							"description": "The string to be replaced in the file. Never use ...existing code... comments in the oldString."
						},
						"newString": {
							"type": "string",
							"description": "The replacement string. Can be empty to delete oldString."
						}
					},
					"required": [
						"filePath",
						"oldString",
						"newString"
					]
				}
			},
			{
				"name": "darbot_editNotebook",
				"toolReferenceName": "editNotebook",
				"displayName": "%darbot.tools.editNotebook.name%",
				"modelDescription": "This is a tool for editing an existing Notebook file in the workspace. Generate the \"explanation\" property first.\nThe system is very smart and can understand how to apply your edits to the notebooks.\nWhen updating the content of an existing cell, ensure newCode includes at least 3-5 lines of context both before and after the new changes, preserving whitespace and indentation exactly.",
				"tags": [],
				"inputSchema": {
					"type": "object",
					"properties": {
						"filePath": {
							"type": "string",
							"description": "An absolute path to the notebook file to edit, or the URI of a untitled, not yet named, file, such as `untitled:Untitled-1."
						},
						"explanation": {
							"type": "string",
							"description": "A one-sentence description of edit operation. This will be shown to the user before the tool is run."
						},
						"cellId": {
							"type": "string",
							"description": "Id of the cell that needs to be deleted or edited. Use the value `TOP`, `BOTTOM` when inserting a cell at the top or bottom of the notebook, else provide the id of the cell after which a new cell is to be inserted. Remember, if a cellId is provided and editType=insert, then a cell will be inserted after the cell with the provided cellId."
						},
						"newCode": {
							"anyOf": [
								{
									"type": "string",
									"description": "The code for the new or existing cell to be edited. Code should not be wrapped within <VSCode.Cell> tags"
								},
								{
									"type": "array",
									"items": {
										"type": "string",
										"description": "The code for the new or existing cell to be edited. Code should not be wrapped within <VSCode.Cell> tags"
									}
								}
							]
						},
						"language": {
							"type": "string",
							"description": "The language of the cell. `markdown`, `python`, `javascript`, `julia`, etc."
						},
						"editType": {
							"type": "string",
							"enum": [
								"insert",
								"delete",
								"edit"
							],
							"description": "The operation peformed on the cell, whether `insert`, `delete` or `edit`.\nUse the `editType` field to specify the operation: `insert` to add a new cell, `edit` to modify an existing cell's content, and `delete` to remove a cell."
						}
					},
					"required": [
						"filePath",
						"explanation",
						"editType"
					]
				}
			},
			{
				"name": "darbot_runNotebookCell",
				"displayName": "%darbot.tools.runNotebookCell.name%",
				"toolReferenceName": "runCell",
				"icon": "$(play)",
				"modelDescription": "This is a tool for running a code cell in a notebook file directly in the notebook editor. The output from the execution will be returned. Code cells should be run as they are added or edited when working through a problem to bring the kernel state up to date and ensure the code executes successfully. Code cells are ready to run and don't require any pre-processing. If asked to run the first cell in a notebook, you should run the first code cell since markdown cells cannot be executed. NOTE: Avoid executing Markdown cells or providing Markdown cell IDs, as Markdown cells cannot be  executed.",
				"userDescription": "%darbot.tools.runNotebookCell.description%",
				"tags": [
					"enable_other_tool_copilot_getNotebookSummary"
				],
				"inputSchema": {
					"type": "object",
					"properties": {
						"filePath": {
							"type": "string",
							"description": "An absolute path to the notebook file with the cell to run, or the URI of a untitled, not yet named, file, such as `untitled:Untitled-1.ipynb"
						},
						"reason": {
							"type": "string",
							"description": "An optional explanation of why the cell is being run. This will be shown to the user before the tool is run and is not necessary if it's self-explanatory."
						},
						"cellId": {
							"type": "string",
							"description": "The ID for the code cell to execute. Avoid providing markdown cell IDs as nothing will be executed."
						},
						"continueOnError": {
							"type": "boolean",
							"description": "Whether or not execution should continue for remaining cells if an error is encountered. Default to false unless instructed otherwise."
						}
					},
					"required": [
						"filePath",
						"cellId"
					]
				}
			},
			{
				"name": "darbot_getNotebookSummary",
				"toolReferenceName": "getNotebookSummary",
				"displayName": "Get the structure of a notebook",
				"modelDescription": "This is a tool returns the list of the Notebook cells along with the id, cell types, language, execution information and output mime types for each cell. This is useful to get Cell Ids when executing a notebook or determine what cells have been executed and what order, or what cells have outputs. Requery this tool if the contents of the notebook change.",
				"tags": [],
				"inputSchema": {
					"type": "object",
					"properties": {
						"filePath": {
							"type": "string",
							"description": "An absolute path to the notebook file with the cell to run, or the URI of a untitled, not yet named, file, such as `untitled:Untitled-1.ipynb"
						}
					},
					"required": [
						"filePath"
					]
				}
			},
			{
				"name": "darbot_readNotebookCellOutput",
				"displayName": "%darbot.tools.getNotebookCellOutput.name%",
				"toolReferenceName": "readNotebookCellOutput",
				"canBeReferencedInPrompt": true,
				"icon": "$(notebook-render-output)",
				"modelDescription": "This tool will retrieve the output for a notebook cell from its most recent execution or restored from disk. The cell may have output even when it has not been run in the current kernel session. This tool has a higher token limit for output length than the runNotebookCell tool.",
				"userDescription": "%darbot.tools.getNotebookCellOutput.description%",
				"when": "userHasOpenedNotebook",
				"tags": [],
				"inputSchema": {
					"type": "object",
					"properties": {
						"filePath": {
							"type": "string",
							"description": "An absolute path to the notebook file with the cell to run, or the URI of a untitled, not yet named, file, such as `untitled:Untitled-1.ipynb"
						},
						"cellId": {
							"type": "string",
							"description": "The ID of the cell for which output should be retrieved."
						}
					},
					"required": [
						"filePath",
						"cellId"
					]
				}
			},
			{
				"name": "darbot_fetchWebPage",
				"displayName": "%darbot.tools.fetchWebPage.name%",
				"toolReferenceName": "fetch",
				"when": "!isWeb",
				"canBeReferencedInPrompt": true,
				"icon": "$(globe)",
				"userDescription": "%darbot.tools.fetchWebPage.description%",
				"modelDescription": "Fetches the main content from a web page. This tool is useful for summarizing or analyzing the content of a webpage. You should use this tool when you think the user is looking for information from a specific webpage.",
				"tags": [],
				"inputSchema": {
					"type": "object",
					"properties": {
						"urls": {
							"type": "array",
							"items": {
								"type": "string"
							},
							"description": "An array of URLs to fetch content from."
						},
						"query": {
							"type": "string",
							"description": "The query to search for in the web page's content. This should be a clear and concise description of the content you want to find."
						}
					},
					"required": [
						"urls",
						"query"
					]
				}
			},
			{
				"name": "darbot_findTestFiles",
				"displayName": "%darbot.tools.findTestFiles.name%",
				"icon": "$(beaker)",
				"canBeReferencedInPrompt": true,
				"toolReferenceName": "findTestFiles",
				"userDescription": "%darbot.tools.findTestFiles.description%",
				"modelDescription": "For a source code file, find the file that contains the tests. For a test file find the file that contains the code under test.",
				"tags": [],
				"inputSchema": {
					"type": "object",
					"properties": {
						"filePaths": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					"required": [
						"filePaths"
					]
				}
			},
			{
				"name": "darbot_getDocInfo",
				"displayName": "%darbot.tools.getDocInfo.name%",
				"icon": "$(beaker)",
				"canBeReferencedInPrompt": false,
				"toolReferenceName": "docInfo",
				"userDescription": "%darbot.tools.getDocInfo.description%",
				"modelDescription": "Find information about how to document it a symbol like a class or function. This tool is useful for generating documentation comments for code symbols. You should use this tool when you think the user is looking for information about how to document a specific code symbol.",
				"tags": [],
				"inputSchema": {
					"type": "object",
					"properties": {
						"filePaths": {
							"type": "array",
							"items": {
								"type": "string"
							},
							"description": "The file paths for which documentation information is needed."
						}
					},
					"required": [
						"filePaths"
					]
				}
			},
			{
				"name": "darbot_getSearchResults",
				"toolReferenceName": "searchResults",
				"displayName": "%darbot.tools.searchResults.name%",
				"icon": "$(search)",
				"userDescription": "%darbot.tools.searchResults.description%",
				"modelDescription": "The results from the search view",
				"canBeReferencedInPrompt": true
			},
			{
				"name": "darbot_githubRepo",
				"toolReferenceName": "githubRepo",
				"displayName": "%darbot.tools.githubRepo.name%",
				"modelDescription": "Searches a GitHub repository for relevant source code snippets. Only use this tool if the user is very clearly asking for code snippets from a specific GitHub repository. Do not use this tool for Github repos that the user has open in their workspace.",
				"userDescription": "%darbot.tools.githubRepo.userDescription%",
				"icon": "$(repo)",
				"canBeReferencedInPrompt": true,
				"inputSchema": {
					"type": "object",
					"properties": {
						"repo": {
							"type": "string",
							"description": "The name of the Github repository to search for code in. Should must be formatted as '<owner>/<repo>'."
						},
						"query": {
							"type": "string",
							"description": "The query to search for repo. Should contain all relevant context."
						}
					},
					"required": [
						"repo",
						"query"
					]
				}
			}
		],
		"languageModelToolSets": [
			{
				"name": "editFiles",
				"description": "%darbot.toolSet.editing.description%",
				"icon": "$(pencil)",
				"tools": [
					"insertEdit",
					"replaceString",
					"applyPatch",
					"createFile",
					"createDirectory",
					"editNotebook",
					"newJupyterNotebook"
				]
			},
			{
				"name": "runNotebooks",
				"description": "%darbot.toolSet.runNotebook.description%",
				"icon": "$(notebook)",
				"tools": [
					"runCell",
					"getNotebookSummary",
					"readNotebookCellOutput"
				]
			},
			{
				"name": "runCommands",
				"description": "%darbot.toolSet.runCommand.description%",
				"icon": "$(terminal)",
				"tools": [
					"runInTerminal",
					"getTerminalOutput"
				]
			},
			{
				"name": "search",
				"description": "%darbot.toolSet.search.description%",
				"icon": "$(search)",
				"tools": [
					"fileSearch",
					"textSearch",
					"listDirectory",
					"readNotebookCellOutput",
					"readFile"
				]
			},
			{
				"name": "new",
				"description": "%darbot.toolSet.new.description%",
				"icon": "$(new-folder)",
				"tools": [
					"newWorkspace",
					"runVscodeCommand",
					"getProjectSetupInfo",
					"installExtension"
				]
			},
			{
				"name": "runTasks",
				"description": "%darbot.toolSet.runTasks.description%",
				"tools": [
					"createAndRunTask",
					"runTask",
					"getTaskOutput"
				]
			}
		],
		"chatParticipants": [
			{
				"id": "darbot.default",
				"name": "DarbotCopilot",
				"fullName": "Darbot Copilot",
				"description": "%darbot.description%",
				"isDefault": true,
				"locations": [
					"panel"
				],
				"modes": [
					"ask"
				],
				"disambiguation": [
					{
						"category": "generate_code_sample",
						"description": "The user wants to generate code snippets without referencing the contents of the current workspace. This category does not include generating entire projects.",
						"examples": [
							"Write an example of computing a SHA256 hash."
						]
					},
					{
						"category": "add_feature_to_file",
						"description": "The user wants to change code in a file that is provided in their request, without referencing the contents of the current workspace. This category does not include generating entire projects.",
						"examples": [
							"Add a refresh button to the table widget."
						]
					},
					{
						"category": "question_about_specific_files",
						"description": "The user has a question about a specific file or code snippet that they have provided as part of their query, and the question does not require additional workspace context to answer.",
						"examples": [
							"What does this file do?"
						]
					}
				]
			},
			{
				"id": "darbot.editingSession",
				"name": "DarbotCopilot",
				"fullName": "Darbot Copilot",
				"description": "%darbot.edits.description%",
				"isDefault": true,
				"locations": [
					"panel"
				],
				"modes": [
					"edit"
				],
				"when": "!config.chat.edits2.enabled"
			},
			{
				"id": "darbot.editingSessionEditor",
				"name": "DarbotCopilot",
				"fullName": "Darbot Copilot",
				"description": "%darbot.edits.description%",
				"isDefault": true,
				"when": "config.inlineChat.enableV2 || config.darbot.chat.advanced.inlineChat2",
				"locations": [
					"editor",
					"notebook"
				],
				"commands": [
					{
						"name": "fix",
						"description": "%darbot.workspace.fix.description%",
						"when": "config.inlineChat.enableV2 || config.darbot.chat.advanced.inlineChat2",
						"disambiguation": [
							{
								"category": "fix",
								"description": "Propose a fix for the problems in the selected code",
								"examples": [
									"There is a problem in this code. Rewrite the code to show it with the bug fixed."
								]
							}
						]
					},
					{
						"name": "tests",
						"description": "%darbot.workspace.tests.description%",
						"when": "config.inlineChat.enableV2 || config.darbot.chat.advanced.inlineChat2",
						"disambiguation": [
							{
								"category": "tests",
								"description": "Help writing tests for the selected code",
								"examples": [
									"Help me write tests for the selected code."
								]
							}
						]
					},
					{
						"name": "doc",
						"description": "%darbot.workspace.doc.description%",
						"when": "config.inlineChat.enableV2 || config.darbot.chat.advanced.inlineChat2",
						"disambiguation": [
							{
								"category": "doc",
								"description": "Add documentation comment for this symbol",
								"examples": [
									"Add jsdoc to this method"
								]
							}
						]
					}
				]
			},
			{
				"id": "darbot.editingSession2",
				"name": "DarbotCopilot",
				"fullName": "Darbot Copilot",
				"description": "%darbot.edits.description%",
				"isDefault": true,
				"locations": [
					"panel"
				],
				"modes": [
					"edit"
				],
				"when": "config.chat.edits2.enabled"
			},
			{
				"id": "darbot.editsAgent",
				"name": "agent",
				"fullName": "Darbot Copilot",
				"description": "%darbot.agent.description%",
				"locations": [
					"panel"
				],
				"modes": [
					"agent"
				],
				"isDefault": true,
				"isAgent": true,
				"when": "config.chat.agent.enabled",
				"commands": [
					{
						"name": "list"
					},
					{
						"name": "error",
						"description": "Make a model request which will result in an error",
						"when": "darbot.chat.debug"
					}
				]
			},
			{
				"id": "darbot.editor",
				"name": "Copilot",
				"fullName": "Darbot Copilot",
				"description": "%darbot.description%",
				"isDefault": true,
				"locations": [
					"editor"
				],
				"when": "!config.inlineChat.enableV2 && !config.darbot.chat.advanced.inlineChat2",
				"disambiguation": [
					{
						"category": "unknown",
						"description": "Intent of this command is unclear or is not related to information technologies",
						"examples": [
							"Add a dog to this comment."
						]
					}
				],
				"commands": [
					{
						"name": "generate",
						"description": "%darbot.workspace.generate.description%",
						"disambiguation": [
							{
								"category": "generate",
								"description": "Generate new code",
								"examples": [
									"Add a function that returns the sum of two numbers"
								]
							}
						]
					},
					{
						"name": "edit",
						"description": "%darbot.workspace.edit.inline.description%",
						"disambiguation": [
							{
								"category": "edit",
								"description": "Make changes to existing code",
								"examples": [
									"Change this method to use async/await"
								]
							}
						]
					},
					{
						"name": "doc",
						"description": "%darbot.workspace.doc.description%",
						"disambiguation": [
							{
								"category": "doc",
								"description": "Add documentation comment for this symbol",
								"examples": [
									"Add jsdoc to this method"
								]
							}
						]
					},
					{
						"name": "fix",
						"description": "%darbot.workspace.fix.description%",
						"disambiguation": [
							{
								"category": "fix",
								"description": "Propose a fix for the problems in the selected code",
								"examples": [
									"There is a problem in this code. Rewrite the code to show it with the bug fixed."
								]
							}
						]
					},
					{
						"name": "explain",
						"description": "%darbot.workspace.explain.description%",
						"disambiguation": [
							{
								"category": "explain",
								"description": "Explain how the code in your active editor works",
								"examples": [
									"Write an explanation for the code above as paragraphs of text."
								]
							}
						]
					},
					{
						"name": "review",
						"description": "%darbot.workspace.review.description%",
						"when": "darbot.advanced.review.intent"
					},
					{
						"name": "tests",
						"description": "%darbot.workspace.tests.description%",
						"disambiguation": [
							{
								"category": "tests",
								"description": "Generate unit tests for the selected code. The user does not want to fix their existing tests.",
								"examples": [
									"Write a set of detailed unit test functions for the code above."
								]
							}
						]
					}
				]
			},
			{
				"id": "darbot.notebook",
				"name": "DarbotCopilot",
				"fullName": "Darbot Copilot",
				"description": "%darbot.description%",
				"isDefault": true,
				"locations": [
					"notebook"
				],
				"when": "!config.inlineChat.enableV2 && !config.darbot.chat.advanced.inlineChat2",
				"commands": [
					{
						"name": "fix",
						"description": "%darbot.workspace.fix.description%"
					},
					{
						"name": "explain",
						"description": "%darbot.workspace.explain.description%"
					}
				]
			},
			{
				"id": "darbot.workspace",
				"name": "workspace",
				"fullName": "Workspace",
				"description": "%darbot.workspace.description%",
				"sampleRequest": "%darbot.workspace.sampleRequest%",
				"locations": [
					"panel"
				],
				"disambiguation": [
					{
						"category": "workspace_project_questions",
						"description": "The user wants to learn about or update the code or files in their current workspace. Questions in this category may be about understanding what the whole workspace does or locating the implementation of some code. This does not include generating or updating tests.",
						"examples": [
							"What does this project do?"
						]
					},
					{
						"category": "find_code_in_workspace",
						"description": "The user wants to locate the implementation of some functionality in their current workspace.",
						"examples": [
							"Where is the tree widget implemented?"
						]
					},
					{
						"category": "generate_with_workspace_context",
						"description": "The user wants to generate code based on multiple files in the workspace and did not specify which files to reference.",
						"examples": [
							"Create a README for this project."
						]
					}
				],
				"commands": [
					{
						"name": "explain",
						"description": "%darbot.workspace.explain.description%"
					},
					{
						"name": "review",
						"description": "%darbot.workspace.review.description%",
						"when": "darbot.advanced.review.intent"
					},
					{
						"name": "tests",
						"description": "%darbot.workspace.tests.description%",
						"disambiguation": [
							{
								"category": "create_tests",
								"description": "The user wants to generate unit tests.",
								"examples": [
									"Generate tests for my selection using pytest."
								]
							}
						]
					},
					{
						"name": "fix",
						"description": "%darbot.workspace.fix.description%",
						"sampleRequest": "%darbot.workspace.fix.sampleRequest%"
					},
					{
						"name": "new",
						"description": "%darbot.workspace.new.description%",
						"sampleRequest": "%darbot.workspace.new.sampleRequest%",
						"isSticky": true,
						"disambiguation": [
							{
								"category": "create_new_workspace_or_extension",
								"description": "The user wants to create a complete Visual Studio Code workspace from scratch, such as a new application or a Visual Studio Code extension. Use this category only if the question relates to generating or creating new workspaces in Visual Studio Code. Do not use this category for updating existing code or generating sample code snippets",
								"examples": [
									"Scaffold a Node server.",
									"Create a sample project which uses the fileSystemProvider API.",
									"react application"
								]
							}
						]
					},
					{
						"name": "newNotebook",
						"description": "%darbot.workspace.newNotebook.description%",
						"sampleRequest": "%darbot.workspace.newNotebook.sampleRequest%",
						"disambiguation": [
							{
								"category": "create_jupyter_notebook",
								"description": "The user wants to create a new Jupyter notebook in Visual Studio Code.",
								"examples": [
									"Create a notebook to analyze this CSV file."
								]
							}
						]
					},
					{
						"name": "semanticSearch",
						"description": "%darbot.workspace.semanticSearch.description%",
						"sampleRequest": "%darbot.workspace.semanticSearch.sampleRequest%",
						"when": "config.darbot.semanticSearch.enabled"
					},
					{
						"name": "setupTests",
						"description": "%darbot.vscode.setupTests.description%",
						"sampleRequest": "%darbot.vscode.setupTests.sampleRequest%",
						"when": "config.darbot.chat.setupTests.enabled",
						"disambiguation": [
							{
								"category": "set_up_tests",
								"description": "The user wants to configure project test setup, framework, or test runner. The user does not want to fix their existing tests.",
								"examples": [
									"Set up tests for this project."
								]
							}
						]
					}
				]
			},
			{
				"id": "darbot.vscode",
				"name": "vscode",
				"fullName": "VS Code",
				"description": "%darbot.vscode.description%",
				"sampleRequest": "%darbot.vscode.sampleRequest%",
				"locations": [
					"panel"
				],
				"disambiguation": [
					{
						"category": "vscode_configuration_questions",
						"description": "The user wants to learn about, use, or configure the Visual Studio Code. Use this category if the users question is specifically about commands, settings, keybindings, extensions and other features available in Visual Studio Code. Do not use this category to answer questions about generating code or creating new projects including Visual Studio Code extensions.",
						"examples": [
							"Switch to light mode.",
							"Keyboard shortcut to toggle terminal visibility.",
							"Settings to enable minimap.",
							"Whats new in the latest release?"
						]
					},
					{
						"category": "configure_python_environment",
						"description": "The user wants to set up their Python environment.",
						"examples": [
							"Create a virtual environment for my project."
						]
					}
				],
				"commands": [
					{
						"name": "search",
						"description": "%darbot.vscode.search.description%",
						"sampleRequest": "%darbot.vscode.search.sampleRequest%"
					},
					{
						"name": "startDebugging",
						"description": "%darbot.vscode.startDebugging.description%",
						"sampleRequest": "%darbot.vscode.startDebugging.sampleRequest%",
						"when": "config.darbot.chat.startDebugging.enabled"
					}
				]
			},
			{
				"id": "darbot.terminal",
				"name": "terminal",
				"fullName": "Terminal",
				"description": "%darbot.terminal.description%",
				"sampleRequest": "%darbot.terminal.sampleRequest%",
				"isDefault": true,
				"locations": [
					"terminal"
				],
				"commands": [
					{
						"name": "explain",
						"description": "%darbot.terminal.explain.description%",
						"sampleRequest": "%darbot.terminal.explain.sampleRequest%"
					}
				]
			},
			{
				"id": "darbot.terminalPanel",
				"name": "terminal",
				"fullName": "Terminal",
				"description": "%darbot.terminalPanel.description%",
				"sampleRequest": "%darbot.terminal.sampleRequest%",
				"locations": [
					"panel"
				],
				"commands": [
					{
						"name": "explain",
						"description": "%darbot.terminal.explain.description%",
						"sampleRequest": "%darbot.terminal.explain.sampleRequest%",
						"disambiguation": [
							{
								"category": "terminal_state_questions",
								"description": "The user wants to learn about specific state such as the selection, command, or failed command in the integrated terminal in Visual Studio Code.",
								"examples": [
									"Why did the latest terminal command fail?"
								]
							}
						]
					}
				]
			}
		],
		"languageModels": [
			{
				"vendor": "copilot"
			},
			{
				"vendor": "copilot-byok"
			}
		],
		"interactiveSession": [
			{
				"label": "GitHub Copilot",
				"id": "copilot",
				"icon": "",
				"when": "!darbot.interactiveSession.disabled"
			}
		],
		"viewsWelcome": [
			{
				"view": "debug",
				"when": "github.darbot-chat.activated",
				"contents": "%darbot.viewsWelcome.debug%"
			}
		],
		"chatViewsWelcome": [
			{
				"icon": "$(copilot-large)",
				"title": "Ask Copilot",
				"content": "%darbot.viewsWelcome.signIn%",
				"when": "!github.darbot-chat.activated && !darbot.offline && !darbot.interactiveSession.individual.expired && !darbot.interactiveSession.enterprise.disabled && !darbot.interactiveSession.contactSupport && !darbot.interactiveSession.chatDisabled && !darbot.interactiveSession.switchToReleaseChannel"
			},
			{
				"icon": "$(copilot-large)",
				"title": "Ask Copilot",
				"content": "%darbot.viewsWelcome.individual.expired%",
				"when": "darbot.interactiveSession.individual.expired"
			},
			{
				"icon": "$(copilot-large)",
				"title": "Ask Copilot",
				"content": "%darbot.viewsWelcome.enterprise%",
				"when": "darbot.interactiveSession.enterprise.disabled"
			},
			{
				"icon": "$(copilot-large)",
				"title": "Ask Copilot",
				"content": "%darbot.viewsWelcome.offline%",
				"when": "darbot.offline"
			},
			{
				"icon": "$(copilot-large)",
				"title": "Ask Copilot",
				"content": "%darbot.viewsWelcome.contactSupport%",
				"when": "darbot.interactiveSession.contactSupport"
			},
			{
				"icon": "$(copilot-large)",
				"title": "Ask Copilot",
				"content": "%darbot.viewsWelcome.chatDisabled%",
				"when": "darbot.interactiveSession.chatDisabled"
			},
			{
				"icon": "$(copilot-large)",
				"title": "Ask Copilot",
				"content": "%darbot.viewsWelcome.switchToReleaseChannel%",
				"when": "darbot.interactiveSession.switchToReleaseChannel"
			}
		],
		"commands": [
			{
				"command": "darbot.chat.explain",
				"title": "%darbot.command.explainThis%",
				"enablement": "!darbot.interactiveSession.disabled",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.chat.explain.palette",
				"title": "%darbot.command.explainThis%",
				"enablement": "!darbot.interactiveSession.disabled && !editorReadonly",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.chat.review",
				"title": "%darbot.command.reviewAndComment%",
				"enablement": "darbot.chat.reviewSelection.enabled && !darbot.interactiveSession.disabled",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.chat.review.apply",
				"title": "%darbot.command.applyReviewSuggestion%",
				"icon": "$(sparkle)",
				"enablement": "commentThread =~ /hasSuggestion/",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.chat.review.applyAndNext",
				"title": "%darbot.command.applyReviewSuggestionAndNext%",
				"icon": "$(sparkle)",
				"enablement": "commentThread =~ /hasSuggestion/",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.chat.review.discard",
				"title": "%darbot.command.discardReviewSuggestion%",
				"icon": "$(close)",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.chat.review.discardAndNext",
				"title": "%darbot.command.discardReviewSuggestionAndNext%",
				"icon": "$(close)",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.chat.review.discardAll",
				"title": "%darbot.command.discardAllReviewSuggestion%",
				"icon": "$(close-all)",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.chat.review.stagedChanges",
				"title": "%darbot.command.reviewStagedChanges%",
				"icon": "$(code-review)",
				"enablement": "darbot.chat.reviewDiff.enabled && !darbot.interactiveSession.disabled",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.chat.review.unstagedChanges",
				"title": "%darbot.command.reviewUnstagedChanges%",
				"icon": "$(code-review)",
				"enablement": "darbot.chat.reviewDiff.enabled && !darbot.interactiveSession.disabled",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.chat.review.changes",
				"title": "%darbot.command.reviewChanges%",
				"icon": "$(code-review)",
				"enablement": "darbot.chat.reviewDiff.enabled && !darbot.interactiveSession.disabled",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.chat.review.changes.cancel",
				"title": "%darbot.command.reviewChanges.cancel%",
				"icon": "$(stop-circle)",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.chat.review.previous",
				"title": "%darbot.command.gotoPreviousReviewSuggestion%",
				"icon": "$(arrow-up)",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.chat.review.next",
				"title": "%darbot.command.gotoNextReviewSuggestion%",
				"icon": "$(arrow-down)",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.chat.review.continueInInlineChat",
				"title": "%darbot.command.continueReviewInInlineChat%",
				"icon": "$(comment-discussion)",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.chat.review.continueInChat",
				"title": "%darbot.command.continueReviewInChat%",
				"icon": "$(comment-discussion)",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.chat.review.markHelpful",
				"title": "%darbot.command.helpfulReviewSuggestion%",
				"icon": "$(thumbsup)",
				"enablement": "!(commentThread =~ /markedAsHelpful/)",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.chat.openUserPreferences",
				"title": "%darbot.command.openUserPreferences%",
				"category": "GitHub Copilot",
				"enablement": "config.darbot.chat.enableUserPreferences"
			},
			{
				"command": "darbot.chat.review.markUnhelpful",
				"title": "%darbot.command.unhelpfulReviewSuggestion%",
				"icon": "$(thumbsdown)",
				"enablement": "!(commentThread =~ /markedAsUnhelpful/)",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.chat.generate",
				"title": "%darbot.command.generateThis%",
				"icon": "$(sparkle)",
				"enablement": "!darbot.interactiveSession.disabled && !editorReadonly",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.chat.generateDocs",
				"title": "%darbot.command.generateDocs%",
				"enablement": "!darbot.interactiveSession.disabled && !editorReadonly",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.chat.generateTests",
				"title": "%darbot.command.generateTests%",
				"enablement": "!darbot.interactiveSession.disabled && !editorReadonly",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.chat.fix",
				"title": "%darbot.command.fixThis%",
				"enablement": "!darbot.interactiveSession.disabled && !editorReadonly",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.interactiveSession.feedback",
				"title": "%darbot.command.sendChatFeedback%",
				"enablement": "github.darbot-chat.activated && !darbot.interactiveSession.disabled",
				"icon": "$(feedback)",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.debug.workbenchState",
				"title": "%darbot.command.logWorkbenchState%",
				"category": "Developer"
			},
			{
				"command": "darbot.debug.showChatLogView",
				"title": "%darbot.command.showChatLogView%",
				"category": "Developer"
			},
			{
				"command": "darbot.debug.showContextInspectorView",
				"title": "%darbot.command.showContextInspectorView%",
				"icon": "$(inspect)",
				"category": "Developer"
			},
			{
				"command": "darbot.terminal.explainTerminalSelection",
				"title": "%darbot.command.explainTerminalSelection%",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.terminal.explainTerminalSelectionContextMenu",
				"title": "%darbot.command.explainTerminalSelectionContextMenu%",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.terminal.explainTerminalLastCommand",
				"title": "%darbot.command.explainTerminalLastCommand%",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.terminal.attachTerminalSelection",
				"title": "%darbot.command.attachTerminalSelection%",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.git.generateCommitMessage",
				"title": "%darbot.git.generateCommitMessage%",
				"icon": "$(sparkle)",
				"enablement": "!darbot.interactiveSession.disabled",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.devcontainer.generateDevContainerConfig",
				"title": "%darbot.devcontainer.generateDevContainerConfig%",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.tests.fixTestFailure",
				"icon": "$(sparkle)",
				"title": "%darbot.command.fixTestFailure%",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.tests.fixTestFailure.fromInline",
				"icon": "$(sparkle)",
				"title": "%darbot.command.fixTestFailure%"
			},
			{
				"command": "darbot.chat.attachSelection",
				"title": "%darbot.chat.attachSelection%",
				"icon": "$(comment-discussion)",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.debug.collectDiagnostics",
				"title": "%darbot.command.collectDiagnostics%",
				"category": "Developer"
			},
			{
				"command": "darbot.debug.generateSTest",
				"title": "%darbot.command.generateSTest%",
				"enablement": "darbot.debugReportFeedback",
				"category": "GitHub Copilot Developer"
			},
			{
				"command": "darbot.debug.generateConfiguration",
				"title": "%darbot.command.generateConfiguration%",
				"category": "GitHub Copilot",
				"enablement": "config.darbot.chat.startDebugging.enabled",
				"tags": [
					"experimental"
				]
			},
			{
				"command": "darbot.open.walkthrough",
				"title": "%darbot.command.openWalkthrough%",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.debug.generateInlineEditTests",
				"title": "Generate Inline Edit Tests",
				"category": "GitHub Copilot",
				"enablement": "resourceScheme == 'ccreq'"
			},
			{
				"command": "darbot.buildLocalWorkspaceIndex",
				"title": "%darbot.command.buildLocalWorkspaceIndex%",
				"category": "GitHub Copilot",
				"enablement": "github.darbot-chat.activated"
			},
			{
				"command": "darbot.buildRemoteWorkspaceIndex",
				"title": "%darbot.command.buildRemoteWorkspaceIndex%",
				"category": "GitHub Copilot",
				"enablement": "github.darbot-chat.activated"
			},
			{
				"command": "darbot.report",
				"title": "Report Issue",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.chat.rerunWithCopilotDebug",
				"title": "%darbot.command.rerunWithCopilotDebug%",
				"category": "GitHub Copilot"
			},
			{
				"command": "darbot.chat.startCopilotDebugCommand",
				"title": "Start Copilot Debug"
			},
			{
				"command": "darbot.chat.clearTemporalContext",
				"title": "Clear Temporal Context",
				"category": "GitHub Copilot (Developer)"
			},
			{
				"command": "darbot.search.markHelpful",
				"title": "Helpful",
				"icon": "$(thumbsup)",
				"enablement": "!darbot.search.feedback.sent"
			},
			{
				"command": "darbot.search.markUnhelpful",
				"title": "Unhelpful",
				"icon": "$(thumbsdown)",
				"enablement": "!darbot.search.feedback.sent"
			},
			{
				"command": "darbot.search.feedback",
				"title": "Feedback",
				"icon": "$(feedback)",
				"enablement": "!darbot.search.feedback.sent"
			},
			{
				"command": "darbot.chat.manageModels",
				"title": "Manage Models...",
				"icon": "$(settings-gear)",
				"category": "GitHub Copilot",
				"enablement": "darbot.byokEnabled"
			},
			{
				"command": "darbot.chat.debug.showElements",
				"title": "Show Rendered Elements"
			},
			{
				"command": "darbot.chat.debug.hideElements",
				"title": "Hide Rendered Elements"
			},
			{
				"command": "darbot.chat.debug.showTools",
				"title": "Show Tools"
			},
			{
				"command": "darbot.chat.debug.hideTools",
				"title": "Hide Tools"
			},
			{
				"command": "darbot.chat.debug.exportLogItem",
				"title": "Export as...",
				"icon": "$(export)"
			},
			{
				"command": "darbot.chat.debug.exportPromptArchive",
				"title": "Export All as Archive...",
				"icon": "$(archive)"
			},
			{
				"command": "darbot.debug.collectWorkspaceIndexDiagnostics",
				"title": "%darbot.command.collectWorkspaceIndexDiagnostics%",
				"category": "Developer"
			},
			{
				"command": "darbot.chat.mcp.setup.check",
				"title": "MCP Check: is supported"
			},
			{
				"command": "darbot.chat.mcp.setup.validatePackage",
				"title": "MCP Check: validate package"
			},
			{
				"command": "darbot.chat.mcp.setup.flow",
				"title": "MCP Check: do prompts"
			},
			{
				"command": "darbot.chat.generateAltText",
				"title": "Generate/Refine Alt Text"
			},
			{
				"command": "darbot.chat.notebook.enableFollowCellExecution",
				"title": "Enable Follow Cell Execution from Chat",
				"shortTitle": "Follow",
				"icon": "$(pinned)"
			},
			{
				"command": "darbot.chat.notebook.disableFollowCellExecution",
				"title": "Disable Follow Cell Execution from Chat",
				"shortTitle": "Unfollow",
				"icon": "$(pinned-dirty)"
			}
		],
		"configuration": [
			{
				"title": "GitHub Copilot Chat",
				"id": "stable",
				"properties": {
					"darbot.chat.codeGeneration.useInstructionFiles": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "%darbot.config.codeGeneration.useInstructionFiles%"
					},
					"darbot.editor.enableCodeActions": {
						"type": "boolean",
						"default": true,
						"description": "%darbot.config.enableCodeActions%"
					},
					"darbot.renameSuggestions.triggerAutomatically": {
						"type": "boolean",
						"default": true,
						"description": "%darbot.config.renameSuggestions.triggerAutomatically%"
					},
					"darbot.chat.localeOverride": {
						"type": "string",
						"enum": [
							"auto",
							"en",
							"fr",
							"it",
							"de",
							"es",
							"ru",
							"zh-CN",
							"zh-TW",
							"ja",
							"ko",
							"cs",
							"pt-br",
							"tr",
							"pl"
						],
						"enumDescriptions": [
							"Use VS Code's configured display language",
							"English",
							"français",
							"italiano",
							"Deutsch",
							"español",
							"русский",
							"中文(简体)",
							"中文(繁體)",
							"日本語",
							"한국어",
							"čeština",
							"português",
							"Türkçe",
							"polski"
						],
						"default": "auto",
						"markdownDescription": "%darbot.config.localeOverride%"
					},
					"darbot.chat.terminalChatLocation": {
						"type": "string",
						"default": "chatView",
						"markdownDescription": "%darbot.config.terminalChatLocation%",
						"markdownEnumDescriptions": [
							"%darbot.config.terminalChatLocation.chatView%",
							"%darbot.config.terminalChatLocation.quickChat%",
							"%darbot.config.terminalChatLocation.terminal%"
						],
						"enum": [
							"chatView",
							"quickChat",
							"terminal"
						]
					},
					"darbot.chat.scopeSelection": {
						"type": "boolean",
						"default": false,
						"markdownDescription": "%darbot.config.scopeSelection%"
					},
					"darbot.chat.useProjectTemplates": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "%darbot.config.useProjectTemplates%"
					},
					"darbot.chat.agent.runTasks": {
						"type": "boolean",
						"default": true,
						"description": "%darbot.config.agent.runTasks%"
					},
					"darbot.nextEditSuggestions.enabled": {
						"type": "boolean",
						"default": false,
						"tags": [
							"nextEditSuggestions",
							"onExp"
						],
						"markdownDescription": "%darbot.nextEditSuggestions.enabled%",
						"scope": "language-overridable"
					},
					"darbot.nextEditSuggestions.fixes": {
						"type": "boolean",
						"default": true,
						"tags": [
							"nextEditSuggestions",
							"onExp"
						],
						"markdownDescription": "%darbot.nextEditSuggestions.fixes%",
						"scope": "language-overridable"
					},
					"darbot.chat.agent.autoFix": {
						"type": "boolean",
						"default": true,
						"description": "%darbot.config.autoFix%"
					}
				}
			},
			{
				"title": "Preview",
				"id": "preview",
				"properties": {
					"darbot.chat.startDebugging.enabled": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "%darbot.config.startDebugging.enabled%",
						"tags": [
							"preview"
						]
					},
					"darbot.chat.reviewSelection.enabled": {
						"type": "boolean",
						"default": true,
						"description": "%darbot.config.reviewSelection.enabled%",
						"tags": [
							"preview"
						]
					},
					"darbot.chat.reviewSelection.instructions": {
						"type": "array",
						"items": {
							"oneOf": [
								{
									"type": "object",
									"markdownDescription": "%darbot.config.reviewSelection.instruction.file%",
									"properties": {
										"file": {
											"type": "string",
											"examples": [
												".darbot-review-instructions.md"
											]
										},
										"language": {
											"type": "string"
										}
									},
									"examples": [
										{
											"file": ".darbot-review-instructions.md"
										}
									],
									"required": [
										"file"
									]
								},
								{
									"type": "object",
									"markdownDescription": "%darbot.config.reviewSelection.instruction.text%",
									"properties": {
										"text": {
											"type": "string",
											"examples": [
												"Use underscore for field names."
											]
										},
										"language": {
											"type": "string"
										}
									},
									"required": [
										"text"
									],
									"examples": [
										{
											"text": "Use underscore for field names."
										},
										{
											"text": "Resolve all TODO tasks."
										}
									]
								}
							]
						},
						"default": [],
						"markdownDescription": "%darbot.config.reviewSelection.instructions%",
						"examples": [
							[
								{
									"file": ".darbot-review-instructions.md"
								},
								{
									"text": "Resolve all TODO tasks."
								}
							]
						],
						"tags": [
							"preview"
						]
					},
					"darbot.chat.darbotDebugCommand.enabled": {
						"type": "boolean",
						"default": true,
						"tags": [
							"preview"
						],
						"description": "%darbot.chat.darbotDebugCommand.enabled%"
					},
					"darbot.chat.codesearch.enabled": {
						"type": "boolean",
						"default": false,
						"tags": [
							"preview"
						],
						"markdownDescription": "%darbot.config.codesearch.enabled%"
					},
					"darbot.chat.edits.codesearch.enabled": {
						"type": "boolean",
						"default": false,
						"tags": [
							"preview"
						],
						"markdownDeprecationMessage": "%darbot.config.edits.codesearch.enabled%"
					},
					"darbot.chat.byok.ollamaEndpoint": {
						"type": "string",
						"default": "http://localhost:11434",
						"tags": [
							"preview"
						],
						"markdownDescription": "%darbot.config.byok.ollamaEndpoint%"
					}
				}
			},
			{
				"title": "Experimental",
				"id": "experimental",
				"properties": {
					"darbot.chat.agent.thinkingTool": {
						"type": "boolean",
						"default": false,
						"tags": [
							"experimental"
						],
						"markdownDescription": "%darbot.config.agent.thinkingTool%"
					},
					"darbot.chat.edits.suggestRelatedFilesFromGitHistory": {
						"type": "boolean",
						"default": true,
						"tags": [
							"experimental"
						],
						"markdownDescription": "%darbot.config.edits.suggestRelatedFilesFromGitHistory%"
					},
					"darbot.chat.edits.suggestRelatedFilesForTests": {
						"type": "boolean",
						"default": true,
						"tags": [
							"experimental"
						],
						"markdownDescription": "%darbot.chat.edits.suggestRelatedFilesForTests%"
					},
					"darbot.chat.codeGeneration.instructions": {
						"markdownDeprecationMessage": "%darbot.config.codeGeneration.instructions.deprecated%",
						"type": "array",
						"items": {
							"oneOf": [
								{
									"type": "object",
									"markdownDescription": "%darbot.config.codeGeneration.instruction.file%",
									"properties": {
										"file": {
											"type": "string",
											"examples": [
												".darbot-codeGeneration-instructions.md"
											]
										},
										"language": {
											"type": "string"
										}
									},
									"examples": [
										{
											"file": ".darbot-codeGeneration-instructions.md"
										}
									],
									"required": [
										"file"
									]
								},
								{
									"type": "object",
									"markdownDescription": "%darbot.config.codeGeneration.instruction.text%",
									"properties": {
										"text": {
											"type": "string",
											"examples": [
												"Use underscore for field names."
											]
										},
										"language": {
											"type": "string"
										}
									},
									"required": [
										"text"
									],
									"examples": [
										{
											"text": "Use underscore for field names."
										},
										{
											"text": "Always add a comment: 'Generated by Copilot'."
										}
									]
								}
							]
						},
						"default": [],
						"markdownDescription": "%darbot.config.codeGeneration.instructions%",
						"examples": [
							[
								{
									"file": ".darbot-codeGeneration-instructions.md"
								},
								{
									"text": "Always add a comment: 'Generated by Copilot'."
								}
							]
						],
						"tags": [
							"experimental"
						]
					},
					"darbot.chat.testGeneration.instructions": {
						"markdownDeprecationMessage": "%darbot.config.testGeneration.instructions.deprecated%",
						"type": "array",
						"items": {
							"oneOf": [
								{
									"type": "object",
									"markdownDescription": "%darbot.config.experimental.testGeneration.instruction.file%",
									"properties": {
										"file": {
											"type": "string",
											"examples": [
												".darbot-test-instructions.md"
											]
										},
										"language": {
											"type": "string"
										}
									},
									"examples": [
										{
											"file": ".darbot-test-instructions.md"
										}
									],
									"required": [
										"file"
									]
								},
								{
									"type": "object",
									"markdownDescription": "%darbot.config.experimental.testGeneration.instruction.text%",
									"properties": {
										"text": {
											"type": "string",
											"examples": [
												"Use suite and test instead of describe and it."
											]
										},
										"language": {
											"type": "string"
										}
									},
									"required": [
										"text"
									],
									"examples": [
										{
											"text": "Always try uniting related tests in a suite."
										}
									]
								}
							]
						},
						"default": [],
						"markdownDescription": "%darbot.config.testGeneration.instructions%",
						"examples": [
							[
								{
									"file": ".darbot-test-instructions.md"
								},
								{
									"text": "Always try uniting related tests in a suite."
								}
							]
						],
						"tags": [
							"experimental"
						]
					},
					"darbot.chat.commitMessageGeneration.instructions": {
						"type": "array",
						"items": {
							"oneOf": [
								{
									"type": "object",
									"markdownDescription": "%darbot.config.commitMessageGeneration.instruction.file%",
									"properties": {
										"file": {
											"type": "string",
											"examples": [
												".darbot-commit-message-instructions.md"
											]
										}
									},
									"examples": [
										{
											"file": ".darbot-commit-message-instructions.md"
										}
									],
									"required": [
										"file"
									]
								},
								{
									"type": "object",
									"markdownDescription": "%darbot.config.commitMessageGeneration.instruction.text%",
									"properties": {
										"text": {
											"type": "string",
											"examples": [
												"Use conventional commit message format."
											]
										}
									},
									"required": [
										"text"
									],
									"examples": [
										{
											"text": "Use conventional commit message format."
										}
									]
								}
							]
						},
						"default": [],
						"markdownDescription": "%darbot.config.commitMessageGeneration.instructions%",
						"examples": [
							[
								{
									"file": ".darbot-commit-message-instructions.md"
								},
								{
									"text": "Use conventional commit message format."
								}
							]
						],
						"tags": [
							"experimental"
						]
					},
					"darbot.chat.pullRequestDescriptionGeneration.instructions": {
						"type": "array",
						"items": {
							"oneOf": [
								{
									"type": "object",
									"markdownDescription": "%darbot.config.pullRequestDescriptionGeneration.instruction.file%",
									"properties": {
										"file": {
											"type": "string",
											"examples": [
												".darbot-pull-request-description-instructions.md"
											]
										}
									},
									"examples": [
										{
											"file": ".darbot-pull-request-description-instructions.md"
										}
									],
									"required": [
										"file"
									]
								},
								{
									"type": "object",
									"markdownDescription": "%darbot.config.pullRequestDescriptionGeneration.instruction.text%",
									"properties": {
										"text": {
											"type": "string",
											"examples": [
												"Include every commit message in the pull request description."
											]
										}
									},
									"required": [
										"text"
									],
									"examples": [
										{
											"text": "Include every commit message in the pull request description."
										}
									]
								}
							]
						},
						"default": [],
						"markdownDescription": "%darbot.config.pullRequestDescriptionGeneration.instructions%",
						"examples": [
							[
								{
									"file": ".darbot-pull-request-description-instructions.md"
								},
								{
									"text": "Use conventional commit message format."
								}
							]
						],
						"tags": [
							"experimental"
						]
					},
					"darbot.chat.generateTests.codeLens": {
						"type": "boolean",
						"default": false,
						"description": "%darbot.config.generateTests.codeLens%",
						"tags": [
							"experimental"
						]
					},
					"darbot.chat.edits.temporalContext.enabled": {
						"type": "boolean",
						"default": false,
						"description": "%darbot.chat.edits.temporalContext.enabled%",
						"tags": [
							"experimental",
							"onExp"
						]
					},
					"darbot.chat.editor.temporalContext.enabled": {
						"type": "boolean",
						"default": false,
						"description": "%darbot.chat.editor.temporalContext.enabled%",
						"tags": [
							"experimental",
							"onExp"
						]
					},
					"darbot.chat.setupTests.enabled": {
						"type": "boolean",
						"default": true,
						"markdownDescription": "%darbot.config.setupTests.enabled%",
						"tags": [
							"experimental"
						]
					},
					"darbot.chat.languageContext.typescript.enabled": {
						"type": "boolean",
						"default": false,
						"scope": "resource",
						"tags": [
							"experimental",
							"onExP"
						],
						"markdownDescription": "%darbot.chat.languageContext.typescript.enabled%"
					},
					"darbot.chat.languageContext.typescript.cacheTimeout": {
						"type": "number",
						"default": 500,
						"scope": "resource",
						"tags": [
							"experimental",
							"onExP"
						],
						"markdownDescription": "%darbot.chat.languageContext.typescript.cacheTimeout%"
					},
					"darbot.chat.languageContext.fix.typescript.enabled": {
						"type": "boolean",
						"default": false,
						"scope": "resource",
						"tags": [
							"experimental",
							"onExP"
						],
						"markdownDescription": "%darbot.chat.languageContext.fix.typescript.enabled%"
					},
					"darbot.chat.languageContext.inline.typescript.enabled": {
						"type": "boolean",
						"default": false,
						"scope": "resource",
						"tags": [
							"experimental",
							"onExP"
						],
						"markdownDescription": "%darbot.chat.languageContext.inline.typescript.enabled%"
					},
					"darbot.chat.newWorkspaceCreation.enabled": {
						"type": "boolean",
						"default": true,
						"tags": [
							"experimental"
						],
						"description": "%darbot.config.newWorkspaceCreation.enabled%"
					},
					"darbot.chat.agent.currentEditorContext.enabled": {
						"type": "boolean",
						"default": true,
						"tags": [
							"experimental"
						],
						"description": "%darbot.config.agent.currentEditorContext.enabled%"
					},
					"darbot.chat.agent.terminal.allowList": {
						"type": "object",
						"default": {},
						"additionalProperties": {
							"type": "boolean",
							"enum": [
								true,
								false
							],
							"enumDescriptions": [
								"%darbot.config.agent.terminal.allowList.value.true%",
								"%darbot.config.agent.terminal.allowList.value.false%"
							],
							"description": "%darbot.config.agent.terminal.allowList.key%"
						},
						"tags": [
							"experimental"
						],
						"markdownDescription": "%darbot.config.agent.terminal.allowList%"
					},
					"darbot.chat.agent.terminal.denyList": {
						"type": "object",
						"default": {
							"rm": true,
							"rmdir": true,
							"del": true,
							"kill": true,
							"curl": true,
							"wget": true,
							"eval": true,
							"chmod": true,
							"chown": true,
							"Remove-Item": true
						},
						"additionalProperties": {
							"type": "boolean",
							"enum": [
								true,
								false
							],
							"enumDescriptions": [
								"%darbot.config.agent.terminal.denyList.value.true%",
								"%darbot.config.agent.terminal.denyList.value.false%"
							],
							"description": "%darbot.config.agent.terminal.denyList.key%"
						},
						"tags": [
							"experimental"
						],
						"markdownDescription": "%darbot.config.agent.terminal.denyList%"
					},
					"darbot.chat.edits.newNotebook.enabled": {
						"type": "boolean",
						"default": true,
						"tags": [
							"experimental",
							"onExp"
						],
						"description": "%darbot.config.editsNewNotebook.enabled%"
					},
					"darbot.chat.notebook.followCellExecution.enabled": {
						"type": "boolean",
						"default": false,
						"tags": [
							"experimental"
						],
						"description": "%darbot.config.notebook.followCellExecution%"
					},
					"darbot.chat.summarizeAgentConversationHistory.enabled": {
						"type": "boolean",
						"default": true,
						"tags": [
							"experimental",
							"onExp"
						],
						"description": "%darbot.config.summarizeAgentConversationHistory.enabled%"
					}
				}
			}
		],
		"submenus": [
			{
				"id": "darbot/reviewComment/additionalActions/applyAndNext",
				"label": "%darbot.submenu.reviewComment.applyAndNext.label%"
			},
			{
				"id": "darbot/reviewComment/additionalActions/discardAndNext",
				"label": "%darbot.submenu.reviewComment.discardAndNext.label%"
			},
			{
				"id": "darbot/reviewComment/additionalActions/discard",
				"label": "%darbot.submenu.reviewComment.discard.label%"
			},
			{
				"id": "darbot.chat.debug.filter",
				"label": "Filter",
				"icon": "$(filter)"
			}
		],
		"menus": {
			"chat/modelPicker": [
				{
					"command": "darbot.chat.manageModels",
					"when": "darbot.byokEnabled"
				}
			],
			"editor/title": [
				{
					"command": "darbot.debug.generateInlineEditTests",
					"when": "resourceScheme == 'ccreq'"
				},
				{
					"command": "darbot.chat.notebook.enableFollowCellExecution",
					"when": "config.darbot.chat.notebook.followCellExecution.enabled && !darbot.notebookFollowInSessionEnabled && darbot.notebookAgentModeUsage && !config.notebook.globalToolbar",
					"group": "navigation@10"
				},
				{
					"command": "darbot.chat.notebook.disableFollowCellExecution",
					"when": "config.darbot.chat.notebook.followCellExecution.enabled && darbot.notebookFollowInSessionEnabled && darbot.notebookAgentModeUsage && !config.notebook.globalToolbar",
					"group": "navigation@10"
				}
			],
			"editor/context/chat": [
				{
					"command": "darbot.chat.explain",
					"when": "!darbot.interactiveSession.disabled",
					"group": "copilotAction@1"
				},
				{
					"command": "darbot.chat.fix",
					"when": "!darbot.interactiveSession.disabled && !editorReadonly",
					"group": "copilotAction@2"
				},
				{
					"command": "darbot.chat.review",
					"when": "darbot.chat.reviewSelection.enabled && !darbot.interactiveSession.disabled && resourceScheme != 'vscode-chat-code-block'",
					"group": "copilotAction@3"
				},
				{
					"command": "darbot.chat.generateDocs",
					"when": "!darbot.interactiveSession.disabled && !editorReadonly",
					"group": "copilotAction@4"
				},
				{
					"command": "darbot.chat.generateTests",
					"when": "!darbot.interactiveSession.disabled && !editorReadonly",
					"group": "copilotAction@5"
				}
			],
			"terminal/context/chat": [
				{
					"command": "darbot.terminal.explainTerminalSelectionContextMenu",
					"group": "copilotAction@1"
				},
				{
					"command": "darbot.terminal.attachTerminalSelection",
					"group": "zEditContext@1"
				}
			],
			"testing/item/result": [
				{
					"command": "darbot.tests.fixTestFailure.fromInline",
					"when": "testResultState == failed && !testResultOutdated",
					"group": "inline@2"
				}
			],
			"testing/item/context": [
				{
					"command": "darbot.tests.fixTestFailure.fromInline",
					"when": "testResultState == failed && !testResultOutdated",
					"group": "inline@2"
				}
			],
			"commandPalette": [
				{
					"command": "darbot.interactiveSession.feedback",
					"when": "github.darbot-chat.activated && !darbot.interactiveSession.disabled"
				},
				{
					"command": "darbot.debug.workbenchState",
					"when": "true"
				},
				{
					"command": "darbot.chat.rerunWithCopilotDebug",
					"when": "false"
				},
				{
					"command": "darbot.chat.startCopilotDebugCommand",
					"when": "false"
				},
				{
					"command": "darbot.terminal.explainTerminalSelectionContextMenu",
					"when": "false"
				},
				{
					"command": "darbot.git.generateCommitMessage",
					"when": "false"
				},
				{
					"command": "darbot.chat.explain",
					"when": "false"
				},
				{
					"command": "darbot.chat.review",
					"when": "!darbot.interactiveSession.disabled"
				},
				{
					"command": "darbot.chat.review.apply",
					"when": "false"
				},
				{
					"command": "darbot.chat.review.applyAndNext",
					"when": "false"
				},
				{
					"command": "darbot.chat.review.discard",
					"when": "false"
				},
				{
					"command": "darbot.chat.review.discardAndNext",
					"when": "false"
				},
				{
					"command": "darbot.chat.review.discardAll",
					"when": "false"
				},
				{
					"command": "darbot.chat.review.stagedChanges",
					"when": "false"
				},
				{
					"command": "darbot.chat.review.unstagedChanges",
					"when": "false"
				},
				{
					"command": "darbot.chat.review.changes",
					"when": "false"
				},
				{
					"command": "darbot.chat.review.changes.cancel",
					"when": "false"
				},
				{
					"command": "darbot.chat.review.previous",
					"when": "false"
				},
				{
					"command": "darbot.chat.review.next",
					"when": "false"
				},
				{
					"command": "darbot.chat.review.continueInInlineChat",
					"when": "false"
				},
				{
					"command": "darbot.chat.review.continueInChat",
					"when": "false"
				},
				{
					"command": "darbot.chat.review.markHelpful",
					"when": "false"
				},
				{
					"command": "darbot.chat.review.markUnhelpful",
					"when": "false"
				},
				{
					"command": "darbot.devcontainer.generateDevContainerConfig",
					"when": "false"
				},
				{
					"command": "darbot.tests.fixTestFailure",
					"when": "false"
				},
				{
					"command": "darbot.tests.fixTestFailure.fromInline",
					"when": "false"
				},
				{
					"command": "darbot.search.markHelpful",
					"when": "false"
				},
				{
					"command": "darbot.search.markUnhelpful",
					"when": "false"
				},
				{
					"command": "darbot.search.feedback",
					"when": "false"
				},
				{
					"command": "darbot.chat.debug.showElements",
					"when": "false"
				},
				{
					"command": "darbot.chat.debug.hideElements",
					"when": "false"
				},
				{
					"command": "darbot.chat.debug.showTools",
					"when": "false"
				},
				{
					"command": "darbot.chat.debug.hideTools",
					"when": "false"
				},
				{
					"command": "darbot.chat.debug.exportLogItem",
					"when": "false"
				},
				{
					"command": "darbot.chat.debug.exportPromptArchive",
					"when": "false"
				},
				{
					"command": "darbot.chat.mcp.setup.check",
					"when": "false"
				},
				{
					"command": "darbot.chat.mcp.setup.validatePackage",
					"when": "false"
				},
				{
					"command": "darbot.chat.mcp.setup.flow",
					"when": "false"
				}
			],
			"view/title": [
				{
					"submenu": "darbot.chat.debug.filter",
					"when": "view == darbot-chat",
					"group": "navigation"
				}
			],
			"view/item/context": [
				{
					"command": "darbot.chat.debug.exportLogItem",
					"when": "view == darbot-chat && (viewItem == toolcall || viewItem == request)",
					"group": "export@1"
				},
				{
					"command": "darbot.chat.debug.exportPromptArchive",
					"when": "view == darbot-chat && viewItem == chatprompt",
					"group": "export@2"
				}
			],
			"searchPanel/aiResults/commands": [
				{
					"command": "darbot.search.markHelpful",
					"group": "inline@0",
					"when": "aiResultsTitle && aiResultsRequested"
				},
				{
					"command": "darbot.search.markUnhelpful",
					"group": "inline@1",
					"when": "aiResultsTitle && aiResultsRequested"
				},
				{
					"command": "darbot.search.feedback",
					"group": "inline@2",
					"when": "aiResultsTitle && aiResultsRequested && darbot.debugReportFeedback"
				}
			],
			"comments/comment/title": [
				{
					"command": "darbot.chat.review.markHelpful",
					"group": "inline@0",
					"when": "commentController == darbot-review"
				},
				{
					"command": "darbot.chat.review.markUnhelpful",
					"group": "inline@1",
					"when": "commentController == darbot-review"
				}
			],
			"commentsView/commentThread/context": [
				{
					"command": "darbot.chat.review.apply",
					"group": "context@1",
					"when": "commentController == darbot-review"
				},
				{
					"command": "darbot.chat.review.discard",
					"group": "context@2",
					"when": "commentController == darbot-review"
				},
				{
					"command": "darbot.chat.review.discardAll",
					"group": "context@3",
					"when": "commentController == darbot-review"
				}
			],
			"comments/commentThread/additionalActions": [
				{
					"submenu": "darbot/reviewComment/additionalActions/applyAndNext",
					"group": "inline@1",
					"when": "commentController == darbot-review && darbot.chat.review.numberOfComments > 1"
				},
				{
					"command": "darbot.chat.review.apply",
					"group": "inline@1",
					"when": "commentController == darbot-review && darbot.chat.review.numberOfComments == 1"
				},
				{
					"submenu": "darbot/reviewComment/additionalActions/discardAndNext",
					"group": "inline@2",
					"when": "commentController == darbot-review && darbot.chat.review.numberOfComments > 1"
				},
				{
					"submenu": "darbot/reviewComment/additionalActions/discard",
					"group": "inline@2",
					"when": "commentController == darbot-review && darbot.chat.review.numberOfComments == 1"
				}
			],
			"darbot/reviewComment/additionalActions/applyAndNext": [
				{
					"command": "darbot.chat.review.applyAndNext",
					"group": "inline@1",
					"when": "commentController == darbot-review"
				},
				{
					"command": "darbot.chat.review.apply",
					"group": "inline@2",
					"when": "commentController == darbot-review"
				}
			],
			"darbot/reviewComment/additionalActions/discardAndNext": [
				{
					"command": "darbot.chat.review.discardAndNext",
					"group": "inline@1",
					"when": "commentController == darbot-review"
				},
				{
					"command": "darbot.chat.review.discard",
					"group": "inline@2",
					"when": "commentController == darbot-review"
				},
				{
					"command": "darbot.chat.review.continueInInlineChat",
					"group": "inline@3",
					"when": "commentController == darbot-review"
				}
			],
			"darbot/reviewComment/additionalActions/discard": [
				{
					"command": "darbot.chat.review.discard",
					"group": "inline@2",
					"when": "commentController == darbot-review"
				},
				{
					"command": "darbot.chat.review.continueInInlineChat",
					"group": "inline@3",
					"when": "commentController == darbot-review"
				}
			],
			"comments/commentThread/title": [
				{
					"command": "darbot.chat.review.previous",
					"group": "inline@1",
					"when": "commentController == darbot-review"
				},
				{
					"command": "darbot.chat.review.next",
					"group": "inline@2",
					"when": "commentController == darbot-review"
				},
				{
					"command": "darbot.chat.review.continueInChat",
					"group": "inline@3",
					"when": "commentController == darbot-review"
				},
				{
					"command": "darbot.chat.review.discardAll",
					"group": "inline@4",
					"when": "commentController == darbot-review"
				}
			],
			"scm/title": [
				{
					"command": "darbot.chat.review.changes",
					"group": "navigation",
					"when": "darbot.chat.reviewDiff.enabled && !darbot.chat.review.sourceControlProgress && scmProvider == git && scmProviderRootUri in darbot.chat.reviewDiff.enabledRootUris"
				},
				{
					"command": "darbot.chat.review.changes.cancel",
					"group": "navigation",
					"when": "darbot.chat.reviewDiff.enabled && darbot.chat.review.sourceControlProgress && scmProvider == git && scmProviderRootUri in darbot.chat.reviewDiff.enabledRootUris"
				}
			],
			"scm/inputBox": [
				{
					"command": "darbot.git.generateCommitMessage",
					"when": "scmProvider == git"
				}
			],
			"testing/message/context": [
				{
					"command": "darbot.tests.fixTestFailure",
					"when": "testing.testItemHasUri",
					"group": "inline@1"
				}
			],
			"debug/createConfiguration": [
				{
					"command": "darbot.debug.generateConfiguration",
					"group": "z_commands",
					"when": "config.darbot.chat.startDebugging.enabled"
				}
			],
			"issue/reporter": [
				{
					"command": "darbot.report"
				}
			],
			"darbot.chat.debug.filter": [
				{
					"command": "darbot.chat.debug.showElements",
					"when": "darbot.chat.debug.elementsHidden",
					"group": "commands@0"
				},
				{
					"command": "darbot.chat.debug.hideElements",
					"when": "!darbot.chat.debug.elementsHidden",
					"group": "commands@0"
				},
				{
					"command": "darbot.chat.debug.showTools",
					"when": "darbot.chat.debug.toolsHidden",
					"group": "commands@1"
				},
				{
					"command": "darbot.chat.debug.hideTools",
					"when": "!darbot.chat.debug.toolsHidden",
					"group": "commands@1"
				}
			],
			"notebook/toolbar": [
				{
					"command": "darbot.chat.notebook.enableFollowCellExecution",
					"when": "config.darbot.chat.notebook.followCellExecution.enabled && !darbot.notebookFollowInSessionEnabled && darbot.notebookAgentModeUsage && config.notebook.globalToolbar",
					"group": "navigation/execute@15"
				},
				{
					"command": "darbot.chat.notebook.disableFollowCellExecution",
					"when": "config.darbot.chat.notebook.followCellExecution.enabled && darbot.notebookFollowInSessionEnabled && darbot.notebookAgentModeUsage && config.notebook.globalToolbar",
					"group": "navigation/execute@15"
				}
			]
		},
		"icons": {
			"darbot-logo": {
				"description": "%darbot.icon%",
				"default": {
					"fontPath": "assets/darbot.woff",
					"fontCharacter": "\\0041"
				}
			},
			"darbot-warning": {
				"description": "%darbot.icon%",
				"default": {
					"fontPath": "assets/darbot.woff",
					"fontCharacter": "\\0042"
				}
			},
			"darbot-notconnected": {
				"description": "%darbot.icon%",
				"default": {
					"fontPath": "assets/darbot.woff",
					"fontCharacter": "\\0043"
				}
			}
		},
		"iconFonts": [
			{
				"id": "darbot-font",
				"src": [
					{
						"path": "assets/darbot.woff",
						"format": "woff"
					}
				]
			}
		],
		"terminalQuickFixes": [
			{
				"id": "darbot-chat.fixWithCopilot",
				"commandLineMatcher": ".+",
				"commandExitResult": "error",
				"outputMatcher": {
					"anchor": "bottom",
					"length": 1,
					"lineMatcher": ".+",
					"offset": 0
				},
				"kind": "explain"
			},
			{
				"id": "darbot-chat.generateCommitMessage",
				"commandLineMatcher": "git add .+",
				"commandExitResult": "success",
				"kind": "explain",
				"outputMatcher": {
					"anchor": "bottom",
					"length": 1,
					"lineMatcher": ".+",
					"offset": 0
				}
			},
			{
				"id": "darbot-chat.terminalToDebugging",
				"commandLineMatcher": ".+",
				"kind": "explain",
				"commandExitResult": "error",
				"outputMatcher": {
					"anchor": "bottom",
					"length": 1,
					"lineMatcher": "",
					"offset": 0
				}
			},
			{
				"id": "darbot-chat.terminalToDebuggingSuccess",
				"commandLineMatcher": ".+",
				"kind": "explain",
				"commandExitResult": "success",
				"outputMatcher": {
					"anchor": "bottom",
					"length": 1,
					"lineMatcher": "",
					"offset": 0
				}
			}
		],
		"languages": [
			{
				"id": "ignore",
				"filenamePatterns": [
					".darbotignore"
				],
				"aliases": []
			},
			{
				"id": "markdown",
				"extensions": [
					".darbotmd"
				]
			}
		],
		"views": {
			"darbot-chat": [
				{
					"id": "darbot-chat",
					"name": "Copilot Chat Debug",
					"icon": "assets/debug-icon.svg",
					"when": "darbot.chat.showLogView"
				}
			],
			"context-inspector": [
				{
					"id": "context-inspector",
					"name": "Language Context Inspector",
					"icon": "$(inspect)",
					"when": "darbot.chat.showContextInspectorView"
				}
			]
		},
		"viewsContainers": {
			"activitybar": [
				{
					"id": "darbot-chat",
					"title": "Copilot Chat Debug",
					"icon": "assets/debug-icon.svg"
				},
				{
					"id": "context-inspector",
					"title": "Language Context Inspector",
					"icon": "$(inspect)"
				}
			]
		},
		"configurationDefaults": {
			"workbench.editorAssociations": {
				"*.darbotmd": "vscode.markdown.preview.editor"
			}
		},
		"keybindings": [
			{
				"command": "darbot.chat.rerunWithCopilotDebug",
				"key": "ctrl+alt+.",
				"mac": "cmd+alt+.",
				"when": "github.darbot-chat.activated && terminalShellIntegrationEnabled && terminalFocus && !terminalAltBufferActive"
			}
		],
		"walkthroughs": [
			{
				"id": "darbotWelcome",
				"title": "%darbot.walkthrough.title%",
				"description": "%darbot.walkthrough.description%",
				"when": "!isWeb",
				"steps": [
					{
						"id": "darbot.setup.signIn",
						"title": "%darbot.walkthrough.setup.signIn.title%",
						"description": "%darbot.walkthrough.setup.signIn.description%",
						"when": "chatEntitlementSignedOut && !view.workbench.panel.chat.view.darbot.visible && !github.darbot-chat.activated && !darbot.offline && !darbot.interactiveSession.individual.disabled && !darbot.interactiveSession.individual.expired && !darbot.interactiveSession.enterprise.disabled && !darbot.interactiveSession.contactSupport",
						"media": {
							"video": {
								"dark": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/workspace.mp4",
								"light": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/workspace-light.mp4",
								"hc": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/workspace-hc.mp4",
								"hcLight": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/workspace-hclight.mp4"
							},
							"altText": "%darbot.walkthrough.panelChat.media.altText%"
						}
					},
					{
						"id": "darbot.setup.signInNoAction",
						"title": "%darbot.walkthrough.setup.signIn.title%",
						"description": "%darbot.walkthrough.setup.noAction.description%",
						"when": "chatEntitlementSignedOut && view.workbench.panel.chat.view.darbot.visible && !github.darbot-chat.activated && !darbot.offline && !darbot.interactiveSession.individual.disabled && !darbot.interactiveSession.individual.expired && !darbot.interactiveSession.enterprise.disabled && !darbot.interactiveSession.contactSupport",
						"media": {
							"video": {
								"dark": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/workspace.mp4",
								"light": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/workspace-light.mp4",
								"hc": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/workspace-hc.mp4",
								"hcLight": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/workspace-hclight.mp4"
							},
							"altText": "%darbot.walkthrough.panelChat.media.altText%"
						}
					},
					{
						"id": "darbot.setup.signUp",
						"title": "%darbot.walkthrough.setup.signUp.title%",
						"description": "%darbot.walkthrough.setup.signUp.description%",
						"when": "chatPlanCanSignUp && !view.workbench.panel.chat.view.darbot.visible && !github.darbot-chat.activated && !darbot.offline && (darbot.interactiveSession.individual.disabled || darbot.interactiveSession.individual.expired) && !darbot.interactiveSession.enterprise.disabled && !darbot.interactiveSession.contactSupport",
						"media": {
							"video": {
								"dark": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/workspace.mp4",
								"light": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/workspace-light.mp4",
								"hc": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/workspace-hc.mp4",
								"hcLight": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/workspace-hclight.mp4"
							},
							"altText": "%darbot.walkthrough.panelChat.media.altText%"
						}
					},
					{
						"id": "darbot.setup.signUpNoAction",
						"title": "%darbot.walkthrough.setup.signUp.title%",
						"description": "%darbot.walkthrough.setup.noAction.description%",
						"when": "chatPlanCanSignUp && view.workbench.panel.chat.view.darbot.visible && !github.darbot-chat.activated && !darbot.offline && (darbot.interactiveSession.individual.disabled || darbot.interactiveSession.individual.expired) && !darbot.interactiveSession.enterprise.disabled && !darbot.interactiveSession.contactSupport",
						"media": {
							"video": {
								"dark": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/workspace.mp4",
								"light": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/workspace-light.mp4",
								"hc": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/workspace-hc.mp4",
								"hcLight": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/workspace-hclight.mp4"
							},
							"altText": "%darbot.walkthrough.panelChat.media.altText%"
						}
					},
					{
						"id": "darbot.panelChat",
						"title": "%darbot.walkthrough.panelChat.title%",
						"description": "%darbot.walkthrough.panelChat.description%",
						"when": "!chatEntitlementSignedOut || chatIsEnabled ",
						"media": {
							"video": {
								"dark": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/workspace.mp4",
								"light": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/workspace-light.mp4",
								"hc": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/workspace-hc.mp4",
								"hcLight": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/workspace-hclight.mp4"
							},
							"altText": "%darbot.walkthrough.panelChat.media.altText%"
						}
					},
					{
						"id": "darbot.edits",
						"title": "%darbot.walkthrough.edits.title%",
						"description": "%darbot.walkthrough.edits.description%",
						"when": "!chatEntitlementSignedOut || chatIsEnabled ",
						"media": {
							"video": {
								"dark": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/edits.mp4",
								"light": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/edits-light.mp4",
								"hc": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/edits-hc.mp4",
								"hcLight": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/edits-hclight.mp4"
							},
							"altText": "%darbot.walkthrough.edits.media.altText%"
						}
					},
					{
						"id": "darbot.firstSuggest",
						"title": "%darbot.walkthrough.firstSuggest.title%",
						"description": "%darbot.walkthrough.firstSuggest.description%",
						"when": "!chatEntitlementSignedOut || chatIsEnabled ",
						"media": {
							"video": {
								"dark": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/ghost-text.mp4",
								"light": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/ghost-text-light.mp4",
								"hc": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/ghost-text-hc.mp4",
								"hcLight": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/ghost-text-hclight.mp4"
							},
							"altText": "%darbot.walkthrough.firstSuggest.media.altText%"
						}
					},
					{
						"id": "darbot.inlineChatNotMac",
						"title": "%darbot.walkthrough.inlineChatNotMac.title%",
						"description": "%darbot.walkthrough.inlineChatNotMac.description%",
						"when": "!isMac && (!chatEntitlementSignedOut || chatIsEnabled )",
						"media": {
							"video": {
								"dark": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/inline.mp4",
								"light": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/inline-light.mp4",
								"hc": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/inline-hc.mp4",
								"hcLight": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/inline-hclight.mp4"
							},
							"altText": "%darbot.walkthrough.inlineChatNotMac.media.altText%"
						}
					},
					{
						"id": "darbot.inlineChatMac",
						"title": "%darbot.walkthrough.inlineChatMac.title%",
						"description": "%darbot.walkthrough.inlineChatMac.description%",
						"when": "isMac && (!chatEntitlementSignedOut || chatIsEnabled )",
						"media": {
							"video": {
								"dark": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/inline.mp4",
								"light": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/inline-light.mp4",
								"hc": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/inline-hc.mp4",
								"hcLight": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/inline-hclight.mp4"
							},
							"altText": "%darbot.walkthrough.inlineChatMac.media.altText%"
						}
					},
					{
						"id": "darbot.sparkle",
						"title": "%darbot.walkthrough.sparkle.title%",
						"description": "%darbot.walkthrough.sparkle.description%",
						"when": "!chatEntitlementSignedOut || chatIsEnabled",
						"media": {
							"video": {
								"dark": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/git-commit.mp4",
								"light": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/git-commit-light.mp4",
								"hc": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/git-commit-hc.mp4",
								"hcLight": "https://vscodewalkthroughs.z1.web.core.windows.net/v0.26/git-commit-hclight.mp4"
							},
							"altText": "%darbot.walkthrough.sparkle.media.altText%"
						}
					}
				]
			}
		],
		"jsonValidation": [
			{
				"fileMatch": "settings.json",
				"url": "ccsettings://root/schema.json"
			}
		],
		"typescriptServerPlugins": [
			{
				"name": "@vscode/darbot-typescript-server-plugin",
				"enableForWorkspaceTypeScriptVersions": true
			}
		]
	},
	"extensionPack": [
		"darbotlabs.darbot-copilot-base"
	],
	"prettier": {
		"useTabs": true,
		"tabWidth": 4,
		"singleQuote": true
	},
	"scripts": {
		"postinstall": "tsx ./script/postinstall.ts",
		"prepare": "husky",
		"vscode-dts:dev": "node node_modules/@vscode/dts/index.js dev && mv vscode.proposed.*.ts src/extension",
		"vscode-dts:main": "node node_modules/@vscode/dts/index.js main && mv vscode.d.ts src/extension",
		"build": "tsx .esbuild.ts",
		"compile": "tsx .esbuild.ts --dev",
		"watch": "npm-run-all -p watch:*",
		"watch:esbuild": "tsx .esbuild.ts --watch --dev",
		"watch:tsc-extension": "tsc --noEmit --watch --project tsconfig.json",
		"watch:tsc-extension-web": "tsc --noEmit --watch --project tsconfig.worker.json",
		"watch:tsc-simulation-workbench": "tsc --noEmit --watch --project test/simulation/workbench/tsconfig.json",
		"typecheck": "tsc --noEmit --project tsconfig.json && tsc --noEmit --project test/simulation/workbench/tsconfig.json && tsc --noEmit --project tsconfig.worker.json",
		"lint": "eslint . --max-warnings=0",
		"lint-staged": "eslint --max-warnings=0",
		"tsfmt": "npx tsfmt -r --verify",
		"test": "npm-run-all test:*",
		"test:extension": "vscode-test",
		"test:sanity": "vscode-test --sanity",
		"test:unit": "vitest --run --pool=forks",
		"vitest": "vitest",
		"bench": "vitest bench",
		"get_env": "tsx script/setup/getEnv.mts",
		"get_token": "tsx script/setup/getToken.mts",
		"prettier": "prettier --list-different --write --cache .",
		"simulate": "node dist/simulationMain.js",
		"simulate-require-cache": "node dist/simulationMain.js --require-cache",
		"simulate-ci": "node dist/simulationMain.js --ci --require-cache",
		"simulate-update-baseline": "node dist/simulationMain.js --update-baseline",
		"simulate-gc": "node dist/simulationMain.js --require-cache --gc",
		"setup": "npm run get_env && npm run get_token",
		"setup:dotnet": "run-script-os",
		"setup:dotnet:darwin:linux": "curl -O https://raw.githubusercontent.com/dotnet/install-scripts/main/src/dotnet-install.sh && chmod u+x dotnet-install.sh && ./dotnet-install.sh --version latest --quality GA --channel STS && rm dotnet-install.sh",
		"setup:dotnet:win32": "Invoke-WebRequest -Uri https://raw.githubusercontent.com/dotnet/install-scripts/main/src/dotnet-install.ps1 && chmod u+x dotnet-install.ps1 && ./dotnet-install.ps1 --version latest --quality GA --channel STS && rm dotnet-install.ps1",
		"create_venv": "tsx script/setup/createVenv.mts",
		"package": "vsce package",
		"web": "vscode-test-web --headless --extensionDevelopmentPath=. ."
	},
	"devDependencies": {
		"@azure/identity": "4.9.1",
		"@azure/keyvault-secrets": "^4.10.0",
		"@azure/msal-node": "^3.6.3",
		"@c4312/scip": "^0.1.0",
		"@fluentui/react-components": "^9.66.6",
		"@fluentui/react-icons": "^2.0.305",
		"@hediet/node-reload": "^0.8.0",
		"@keyv/sqlite": "^4.0.5",
		"@nteract/messaging": "^7.0.20",
		"@parcel/watcher": "^2.5.1",
		"@stylistic/eslint-plugin": "^3.0.1",
		"@types/eslint": "^9.0.0",
		"@types/google-protobuf": "^3.15.12",
		"@types/markdown-it": "^14.0.0",
		"@types/minimist": "^1.2.5",
		"@types/mocha": "^10.0.10",
		"@types/node": "^22.16.3",
		"@types/picomatch": "^4.0.0",
		"@types/react": "17.0.44",
		"@types/react-dom": "^18.2.17",
		"@types/sinon": "^17.0.4",
		"@types/source-map-support": "^0.5.10",
		"@types/tar": "^6.1.13",
		"@types/vinyl": "^2.0.12",
		"@types/vscode": "^1.96.0",
		"@typescript-eslint/eslint-plugin": "^8.35.0",
		"@typescript-eslint/parser": "^8.32.0",
		"@typescript-eslint/typescript-estree": "^8.26.1",
		"@vitest/coverage-v8": "^3.2.4",
		"@vitest/snapshot": "^1.5.0",
		"@vscode/dts": "^0.4.1",
		"@vscode/lsif-language-service": "^0.1.0-pre.4",
		"@vscode/test-cli": "^0.0.11",
		"@vscode/test-electron": "^2.5.2",
		"@vscode/test-web": "^0.0.71",
		"@vscode/vsce": "3.6.0",
		"@vscode/zeromq": "0.2.7",
		"csv-parse": "^6.0.0",
		"dotenv": "^17.2.0",
		"electron": "^37.2.1",
		"esbuild": "^0.25.6",
		"eslint": "^9.30.0",
		"eslint-import-resolver-typescript": "^4.4.4",
		"eslint-plugin-header": "^3.1.1",
		"eslint-plugin-import": "^2.32.0",
		"eslint-plugin-jsdoc": "^51.3.4",
		"eslint-plugin-no-only-tests": "^3.3.0",
		"fastq": "^1.19.1",
		"glob": "^11.0.3",
		"husky": "^9.1.7",
		"keyv": "^5.3.2",
		"lint-staged": "15.2.9",
		"minimist": "^1.2.8",
		"mobx": "^6.13.7",
		"mobx-react-lite": "^4.1.0",
		"mocha": "^11.7.1",
		"monaco-editor": "0.44.0",
		"npm-run-all": "^4.1.5",
		"open": "^10.1.2",
		"outdent": "^0.8.0",
		"picomatch": "^4.0.2",
		"playwright": "^1.54.0",
		"prettier": "^3.6.2",
		"react": "^17.0.2",
		"react-dom": "17.0.2",
		"run-script-os": "^1.1.6",
		"sinon": "^21.0.0",
		"source-map-support": "^0.5.21",
		"tar": "^7.4.3",
		"ts-dedent": "^2.2.0",
		"tsx": "^4.20.3",
		"typescript": "^5.8.3",
		"typescript-eslint": "^8.36.0",
		"typescript-formatter": "github:jrieken/typescript-formatter#497efb26bc40b5fa59a350e6eab17bce650a7e4b",
		"vite-plugin-top-level-await": "^1.5.0",
		"vite-plugin-wasm": "^3.5.0",
		"vitest": "^3.0.5",
		"yaml": "^2.8.0",
		"zeromq": "github:rebornix/zeromq.js#a19e8e373b3abc677f91b936d3f00d49b1b61792"
	},
	"dependencies": {
		"@anthropic-ai/sdk": "^0.56.0",
		"@humanwhocodes/gitignore-to-minimatch": "1.0.2",
		"@microsoft/tiktokenizer": "^1.0.10",
		"@roamhq/mac-ca": "^1.0.7",
		"@vscode/copilot-api": "^0.1.1",
		"@vscode/extension-telemetry": "^1.0.0",
		"@vscode/l10n": "^0.0.18",
		"@vscode/prompt-tsx": "^0.4.0-alpha.5",
		"@vscode/tree-sitter-wasm": "^0.0.5",
		"@xterm/headless": "^5.5.0",
		"ajv": "^8.17.1",
		"applicationinsights": "^2.9.7",
		"ignore": "^7.0.5",
		"isbinaryfile": "^5.0.4",
		"jsonc-parser": "^3.3.1",
		"lru-cache": "^11.1.0",
		"markdown-it": "^14.1.0",
		"minimatch": "^10.0.3",
		"undici": "^7.11.0",
		"vscode-languageserver-textdocument": "^1.0.12",
		"vscode-tas-client": "^0.1.84",
		"web-tree-sitter": "^0.23.0"
	},
	"overrides": {
		"@aminya/node-gyp-build": "npm:node-gyp-build@4.8.1",
		"string_decoder": "npm:string_decoder@1.2.0",
		"node-gyp": "npm:node-gyp@10.3.1"
	}
}
